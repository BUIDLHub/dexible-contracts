{
  "address": "0xA4913914C0011f1e557fE41D4fBAB5399538fa97",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFeePaid",
          "type": "uint256"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bpsFee",
          "type": "uint256"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "TraderPenalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeTokenETHPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_trySwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "failReason",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "addRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeTokenETHPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDevTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockoutBlocks",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenaltyFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "team",
          "type": "address"
        }
      ],
      "name": "setDevTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "blocks",
          "type": "uint8"
        }
      ],
      "name": "setLockoutBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setPenaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e31bff0d5959ad24bd6e3a3f371679a97fd021e19e981ca43572d28499a13b4",
  "receipt": {
    "to": null,
    "from": "0xb631E8650fB4bEfDAe74Ab9f86a9Cb65bC134706",
    "contractAddress": "0xA4913914C0011f1e557fE41D4fBAB5399538fa97",
    "transactionIndex": 50,
    "gasUsed": "2866952",
    "logsBloom": "0x
    "blockHash": "0x28a2c56db0171f7b9d2130450100298bdfd1014f6739474fb6eaa9dd656607c0",
    "transactionHash": "0x4e31bff0d5959ad24bd6e3a3f371679a97fd021e19e981ca43572d28499a13b4",
    "logs": [],
    "blockNumber": 12865815,
    "cumulativeGasUsed": "5292372",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8ec3373101f3889772ed8b12c5c21e07",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeePaid\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bpsFee\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TraderPenalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_trySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"failReason\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockoutBlocks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setDevTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blocks\",\"type\":\"uint8\"}],\"name\":\"setLockoutBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setPenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fill((address,address,uint256,uint256,(address,uint112),(address,uint112)),address,bytes)\":{\"notice\":\"Fill an order using the given router and forwarded call data.\"},\"getConfig()\":{\"notice\":\"Get the current configuration struct\"},\"getDevTeam()\":{\"notice\":\"Get the dev team wallet/multi-sig address\"},\"getLockoutBlocks()\":{\"notice\":\"Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw.\"},\"getMinFee()\":{\"notice\":\"Get the minimum fee required for all orders\"},\"getPenaltyFee()\":{\"notice\":\"Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain.\"},\"setConfig((address,uint128,uint128,uint8))\":{\"notice\":\"Set the current configuration as a bulk setting\"},\"setDevTeam(address)\":{\"notice\":\"Set the dev team wallet/multi-sig address\"},\"setLockoutBlocks(uint8)\":{\"notice\":\"Set the number of blocks to wait before thawed withdraws are allowed\"},\"setMinFee(uint128)\":{\"notice\":\"Set the minimum fee for an order execution\"},\"setPenaltyFee(uint128)\":{\"notice\":\"Set the penalty assessed when a user removes tokens or gas tank funds\"},\"withdraw(uint256)\":{\"notice\":\"Team's ability to withdraw ETH balance from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Settlement.sol\":\"Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/BaseAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./libs/LibAccess.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseAccess {\\n    using LibAccess for Types.AccessControl;\\n    \\n\\n    //bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n    //bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = 0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a;\\n    //bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = 0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7;\\n    //bytes32 public constant ACTION_ROLE = keccak256(\\\"ACTION_ROLE\\\");\\n    bytes32 public constant ACTION_ROLE = 0xd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e;\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function hasRole(bytes32 role, address actor) public view returns (bool) {\\n        return LibStorage.getAccessStorage().hasRole(role, actor);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Not pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelay() {\\n        require(hasRole(RELAY_ROLE, _msgSender()), \\\"Not relay\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        Types.InitControls storage ic = LibStorage.getInitControls();\\n        require(ic.initializing || !ic.initialized, \\\"Already initialized\\\");\\n        \\n        bool tlc = !ic.initializing;\\n        if(tlc) {\\n            ic.initializing = true;\\n            ic.initialized = true;\\n        }\\n        _;\\n        if(tlc) {\\n            ic.initializing = false;\\n        }\\n    }\\n\\n    modifier nonReentrant() {\\n        \\n        require(!LibStorage.getAccessStorage().reentrantFlag, \\\"Attempting to re-enter function recursively\\\");\\n        LibStorage.getAccessStorage().reentrantFlag = true;\\n        _;\\n        LibStorage.getAccessStorage().reentrantFlag = false;\\n    }\\n\\n    //================ MUTATIONS ===============/\\n    \\n    function addRole(bytes32 role, address actor) public onlyAdmin {\\n        _setupRole(role, actor);\\n    }\\n\\n    function revokeRole(bytes32 role, address actor) public onlyAdmin {\\n        LibStorage.getAccessStorage()._revokeRole(role, actor);\\n    }\\n\\n    function _setupRole(bytes32 role, address actor) internal {\\n        LibStorage.getAccessStorage()._addRole(role, actor);\\n    }\\n\\n    function initAccess() internal initializer {\\n        address o = _msgSender();\\n        _setupRole(ADMIN_ROLE, o);\\n        _setupRole(PAUSER_ROLE, o);\\n    }\\n}\",\"keccak256\":\"0x8e62750fb7ef12eedae53245274a9527eba1ada13e6744b024398deeec13af21\",\"license\":\"Unlicense\"},\"contracts/BaseConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./libs/LibConfig.sol\\\";\\nimport \\\"./BaseAccess.sol\\\";\\n\\nabstract contract BaseConfig is BaseAccess {\\n    using LibConfig for Types.Config;\\n   \\n    /**\\n     * Initialize config settings. This is called at initialization time when contracts \\n     * are first deployed.\\n     */\\n    function initConfig(Types.Config memory config) internal {\\n        LibStorage.getConfigStorage().store(config);\\n        BaseAccess.initAccess();\\n    }\\n\\n    /**\\n     * Get the current configuration struct\\n     */\\n    function getConfig() external view returns (Types.Config memory) {\\n        return LibStorage.getConfigStorage().copy();\\n    }\\n\\n    \\n    \\n    //============== VIEWS ================/\\n    /**\\n     * Get the dev team wallet/multi-sig address\\n     */\\n    function getDevTeam() external view returns (address) {\\n        return LibStorage.getConfigStorage().devTeam;\\n    }\\n\\n    /**\\n     * Get the number of blocks to wait before trader can withdraw gas tank funds \\n     * marked for withdraw.\\n     */\\n    function getLockoutBlocks() external view returns (uint8) {\\n        return LibStorage.getConfigStorage().lockoutBlocks;\\n    }\\n\\n    /**\\n     * Get the minimum fee required for all orders\\n     */\\n    function getMinFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().minFee;\\n    }\\n\\n    /**\\n     * Get the penalty fee to asses when trader removes tokens or funds after\\n     * Dexible submits orders on-chain.\\n     */\\n    function getPenaltyFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    /**\\n     * Set the current configuration as a bulk setting\\n     */\\n    function setConfig(Types.Config memory config) public onlyAdmin {\\n        LibStorage.getConfigStorage().store(config);\\n    }\\n\\n    /**\\n     * Set the dev team wallet/multi-sig address\\n     */\\n    function setDevTeam( address team) external onlyAdmin {\\n        LibStorage.getConfigStorage().devTeam = team;\\n    }\\n\\n    /**\\n     * Set the number of blocks to wait before thawed withdraws are allowed\\n     */\\n    function setLockoutBlocks(uint8 blocks) external onlyAdmin {\\n        LibStorage.getConfigStorage().lockoutBlocks = blocks;\\n    }\\n\\n    /**\\n     * Set the minimum fee for an order execution\\n     */\\n    function setMinFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().minFee = fee;\\n    }\\n\\n    /**\\n     * Set the penalty assessed when a user removes tokens or gas tank funds\\n     */\\n    function setPenaltyFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().penaltyFee = fee;\\n    }\\n}\",\"keccak256\":\"0xbb12e9ea10c2f4a7fffe36c4ffaa327586d526e995e61a18d13cd95056d8d6ab\",\"license\":\"Unlicense\"},\"contracts/IDexRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * Abstraction of DEX integration with simple fill function.\\n */\\ninterface IDexRouter {\\n\\n    /**\\n     * Fill an order using the given call data details.\\n     */\\n    function fill(Types.Order memory order, bytes calldata swapData) external returns (bool status, string memory failReason);\\n}\",\"keccak256\":\"0x533da7b055fefcaa060117c9a400dd5a2d94c9427f5c1acf2609bc974be744ae\",\"license\":\"Unlicense\"},\"contracts/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IDexRouter.sol\\\";\\nimport \\\"./BaseConfig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\n\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract Settlement is BaseConfig {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n    using SafeMath for uint128;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //============= EVENT DEFS =================/\\n    event TraderPenalized(address indexed trader, \\n                          uint256 penalty, \\n                          uint256 gasPaid, \\n                          string reason);\\n    event SwapFailed(address indexed trader, \\n                     string reason, \\n                     IERC20 feeToken, \\n                     uint gasFeePaid);\\n    event SwapSuccess(address indexed trader,\\n                       uint inputAmount,\\n                       uint outputAmount,\\n                       IERC20 feeToken,\\n                       uint gasFee,\\n                       uint bpsFee);\\n    event ReceivedETH(address indexed sender, uint amount);\\n    event WithdrewETH(address indexed receiver, uint amount);\\n    event PaidGasFunds(address indexed relay, uint amount);\\n    event InsufficientGasFunds(address indexed relay, uint amount);\\n\\n    //============== CONSTANTS ==============/\\n    //gas needed after action executes\\n    uint256 constant OP_GAS = 40_000;\\n\\n    //for final transfers and events\\n    uint256 constant GAS_OVERHEAD = 50_000;\\n\\n    struct BalTracking {\\n        uint256 beforeIn;\\n        uint256 beforeOut;\\n        uint256 afterIn;\\n        uint256 afterOut;\\n    }\\n\\n    receive() external payable {\\n        emit ReceivedETH(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * Fill an order using the given router and forwarded call data.\\n     */\\n    function fill(Types.Order memory order, IDexRouter router, bytes calldata data) public onlyRelay nonReentrant {\\n\\n        uint256 startGas = gasleft();\\n        //pre-trade condition checks\\n        BalTracking memory _tracker = _preCheck(order);\\n\\n        //make adjustments to order input if fee token is sell-side\\n        Types.Order memory adjusted = _preAdjustOrder(order);\\n\\n        //execute fill\\n        (bool success, string memory failReason) = performFill(adjusted, router, data);\\n\\n        //post-trade condition check\\n        _postCheck(order, _tracker, success);\\n\\n        //post-trade actions to transfer fees, etc.\\n        _postActions(order, success, failReason, _tracker, startGas);\\n    } \\n\\n    /**\\n     * Team's ability to withdraw ETH balance from the contract.\\n     */\\n    function withdraw(uint amount) public onlyAdmin {\\n        require(amount <= address(this).balance, \\\"Insufficient balance to make transfer\\\");\\n        _msgSender().transfer(amount);\\n        emit WithdrewETH(_msgSender(), amount);\\n    }\\n\\n    // @dev initialize the settlement contract \\n    function initialize(Types.Config memory config) public initializer {\\n        BaseConfig.initConfig(config);\\n    }\\n\\n    // @dev whether the trader has a token balance to support input side of order\\n    function _hasTokens(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.balanceOf(order.trader) >= order.input.amount;\\n        return b;\\n    }\\n\\n    // @dev whether the trader has approved this contract to spend enought for order\\n    function _canSpend(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.allowance(order.trader, address(this)) >= order.input.amount;\\n        return b;\\n    }\\n\\n    // @dev make sure trader has token balance and allowance to cover order\\n    function _preCheck(Types.Order memory order) internal view returns (BalTracking memory) {\\n        //require(_hasFunds(order, tx.gasprice), \\\"Insufficient gas tank funds\\\");\\n        require(_hasTokens(order), \\\"Insufficient input token balance to trade\\\");\\n        require(_canSpend(order), \\\"Insufficient spend allowance on input token\\\");\\n        //before balances\\n        return BalTracking(\\n            order.input.token.balanceOf(order.trader),\\n            order.output.token.balanceOf(address(this)),\\n            0,0\\n        );\\n    }\\n\\n    \\n    // @dev compute the gas and BPS fee for an order\\n    function _computeFees(Types.Order memory order, uint gasUsed) internal view returns (uint gasFee, uint bpsFee) {\\n        console.log(\\\"---- Computing Fees -----\\\");\\n        uint estGasCost = tx.gasprice * gasUsed;\\n        console.log(\\\"Estimated gas cost\\\", estGasCost);\\n        uint decs = IERC20Metadata(address(order.feeToken)).decimals();\\n        gasFee = (estGasCost.mul(10**decs)).div(order.feeTokenETHPrice);\\n        console.log(\\\"Gas portion in fee token\\\", gasFee);\\n        if(order.feeToken == order.input.token) {\\n            bpsFee = (order.input.amount.mul(LibStorage.getConfigStorage().minFee)).div(10000); //in bps\\n        } else {\\n            bpsFee = (order.output.amount.mul(LibStorage.getConfigStorage().minFee)).div(10000);\\n        }\\n        console.log(\\\"BPS fee\\\", bpsFee); \\n        console.log(\\\"---- End compute fees ----\\\");   \\n    }\\n\\n    // @dev make adjustments to input amount if the fee token is the sell-side token\\n    function _preAdjustOrder(Types.Order memory order) internal view returns (Types.Order memory) {\\n        if(order.feeToken == order.input.token) {\\n            console.log(\\\"Taking fee from output token\\\");\\n            uint newInput = 0;\\n            {\\n                //compute gas and bps fees\\n                (uint gasPortion, uint bpsPortion) = _computeFees(order, order.gasEstimate);\\n\\n                //take out fees before swap\\n                newInput = order.input.amount.sub(gasPortion.add(bpsPortion));\\n                console.log(\\\"Old input amount\\\", order.input.amount);\\n                console.log(\\\"New input amount\\\", newInput);\\n            }\\n\\n            //create new order using most of same info except new input amount\\n            return Types.Order({trader: order.trader, \\n                feeToken: order.feeToken,\\n                feeTokenETHPrice: order.feeTokenETHPrice,\\n                gasEstimate: order.gasEstimate,\\n                input: Types.TokenAmount({\\n                    token: order.input.token,\\n                    amount: uint112(newInput)\\n                }),\\n                output: order.output\\n            });\\n        } \\n        //output fee does not need to make any adjustments. Everything is done after swap\\n        return order;  \\n    }\\n\\n    // @dev perform the actual token swap, catching any problems along the way so we can handle\\n    // gas reimbursements correctly\\n    function performFill(Types.Order memory order, IDexRouter router, bytes calldata data) internal returns (bool success, string memory failReason) {\\n        //execute action. This is critical that we use our own internal call to actually\\n        //perform swap inside trycatch. This way, transferred funds to router are \\n        //reverted if swap fails\\n\\n        try this._trySwap{\\n            gas: gasleft().sub(OP_GAS)\\n        }(order, router, data) returns (bool _success, string memory _failReason) {\\n            if(!_success) {\\n                console.log(\\\"FailReason\\\", _failReason);\\n            }\\n            return (_success, _failReason);\\n        } catch Error(string memory err) {\\n            success = false;\\n            failReason = err;\\n            console.log(\\\"FailReason\\\", err);\\n        } catch {\\n            success = false;\\n            failReason = \\\"Unknown fail reason\\\";\\n        }\\n        \\n        \\n    }\\n\\n    // @dev perform any pre-swap actions, like transferring tokens to router\\n    function _preActions(Types.Order memory order, IDexRouter router) internal {\\n        //transfer input tokens to router so it can perform dex trades\\n        console.log(\\\"Transfering to router:\\\", order.input.amount);\\n        order.input.token.safeTransferFrom(order.trader, address(router), order.input.amount);\\n    }\\n\\n    // @dev try making the swap through router.\\n    function _trySwap(Types.Order calldata order, IDexRouter router, bytes calldata data) external returns (bool success, string memory failReason) {\\n        require(msg.sender == address(this), \\\"Can only be called by settlement contract\\\");\\n        _preActions(order, router);\\n        (bool s, string memory err) = router.fill(order, data);\\n        if(!s) {\\n            revert(err);\\n        }\\n        return (s, err);\\n    }\\n\\n    // @dev after swap, check if expected balances match\\n    function _postCheck(Types.Order memory order, BalTracking memory _tracking, bool success) internal view {\\n        \\n        _tracking.afterIn = order.input.token.balanceOf(order.trader);\\n\\n        if(!success) {\\n            //have to revert if funds were not refunded in order to roll everything back.\\n            //in this case, the router is at fault, which is Dexible's fault and therefore \\n            //Dexible relay address should eat the cost of failure\\n            console.log(\\\"Input bal b4\\\", _tracking.beforeIn);\\n            console.log(\\\"Input bal after\\\", _tracking.afterIn);\\n            require(_tracking.afterIn == _tracking.beforeIn, \\\"failed trade action did not refund input funds\\\");\\n        } else {\\n            _tracking.afterOut = order.output.token.balanceOf(address(this));\\n            //if the in/out amounts don't line up, then transfers weren't made properly in the\\n            //router.\\n\\n            console.log(\\\"Output token balance before swap\\\", _tracking.beforeOut);\\n            console.log(\\\"Output balance after swap\\\", _tracking.afterOut);\\n            require(_tracking.afterOut.sub(_tracking.beforeOut) >= order.output.amount, \\\"Trade action did not transfer output tokens to trader\\\");\\n            require(_tracking.beforeIn.sub(_tracking.afterIn) <= order.input.amount, \\\"Used too many input tokens\\\");\\n        }\\n    }\\n\\n    // @dev carry out post-swap actions, transferring funds, etc.\\n    function _postActions(Types.Order memory order, \\n                          bool success, \\n                          string memory failReason, \\n                          BalTracking memory _tracking,\\n                          uint startGas) internal {\\n\\n        //reimburse relay estimated gas fees. Add a little overhead for the remaining\\n        //ops in this function\\n        uint256 totalGasUsed = startGas.sub(gasleft()).add(GAS_OVERHEAD);\\n        console.log(\\\"Total gas used\\\", totalGasUsed);\\n\\n        uint256 gasFee = totalGasUsed.mul(tx.gasprice);\\n        console.log(\\\"Gas fee\\\", gasFee);\\n\\n        //compute post-swap fees again now that we have a better idea of actual gas usage\\n        (uint gasInFeeToken, uint bpsFee) = _computeFees(order, totalGasUsed);\\n        \\n        //if there is ETH in the contract, reimburse the relay that called the fill function\\n        if(address(this).balance < gasFee) {\\n            console.log(\\\"Cannot reimburse relay since do not have enough funds\\\");\\n            emit InsufficientGasFunds(_msgSender(), gasFee);\\n        } else {\\n            console.log(\\\"Transfering gas fee to relay\\\");\\n            _msgSender().transfer(gasFee);\\n            emit PaidGasFunds(_msgSender(), gasFee);\\n        }\\n       \\n        uint fees = 0;\\n        if(!success) {\\n            //we still owe the gas fees to the team/relay even though the swap failed. This is because\\n            //the trader may have set slippage too low, thus increasing the chance of failure.\\n            fees = (gasInFeeToken);\\n            console.log(\\\"Failed gas fee\\\", fees);\\n            if(order.feeToken == order.input.token) {\\n                console.log(\\\"Transferring partial input token to devteam for failure gas fees\\\");\\n                order.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, fees);\\n                emit SwapFailed(order.trader,failReason, order.feeToken, fees);\\n            } else {\\n                console.log(\\\"Fee token is output; therefore cannot reimburse team for failure gas fees\\\");\\n                emit SwapFailed(order.trader,failReason, order.feeToken, 0);\\n            }\\n            \\n            //tell trader it failed\\n            console.log(\\\"Swap failed\\\");\\n            \\n        } else {\\n            //on success, the gas and bps fee are paid to the dev team\\n            fees = gasInFeeToken.add(bpsFee);\\n\\n            //gross is delta between starting/ending balance before/after swap\\n            uint grossOut = _tracking.afterOut.sub(_tracking.beforeOut);\\n            console.log(\\\"Gross output amount\\\", grossOut);\\n\\n            uint toTrader = 0;\\n            if(order.feeToken == order.input.token) {\\n                //if we take fees from the input token,\\n                //the trader gets all output \\n                toTrader = grossOut;\\n                console.log(\\\"Transferring fees from input token to devTeam\\\", fees);\\n                order.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, fees);\\n            } else {\\n                //otherwise, trader gets a portion of the output\\n                //and team gets rest\\n                console.log(\\\"Reducing output by fees\\\", fees);\\n                toTrader = grossOut.sub(fees);\\n                \\n                //output comes from this contract, not trader for fees\\n                console.log(\\\"Sending fees from output token to team\\\", fees);\\n                order.feeToken.safeTransfer(LibStorage.getConfigStorage().devTeam, fees);\\n            }\\n            \\n            console.log(\\\"Sending total output to trader\\\", toTrader);\\n            order.output.token.safeTransfer(order.trader, toTrader);\\n\\n            emit SwapSuccess(order.trader,\\n                        order.input.amount,\\n                        toTrader, \\n                        order.feeToken,\\n                        gasInFeeToken,\\n                        bpsFee); \\n            console.log(\\\"Finished swap\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x869a3817bc9372dc9803a22500323cdd830e2c9be89402d1b5618d2ecbd10988\",\"license\":\"Unlicense\"},\"contracts/Types.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Types {\\n\\n    struct TokenAmount {\\n        IERC20 token;\\n        uint112 amount;\\n    }\\n\\n    //status of order. Only tracked on action from user/miners\\n    enum OrderStatus {\\n        UNDEFINED,\\n        PENDING,\\n        FILLED,\\n        CANCELLED,\\n        PENALIZED\\n    }\\n\\n    struct Order {\\n\\n        //trader that owns the order\\n        address trader;\\n\\n        //the token we are taking as fee\\n        IERC20 feeToken;\\n\\n        //eth price of fee token in whole units\\n        uint feeTokenETHPrice;\\n\\n        //an estimate of gas to use to fill the order\\n        uint gasEstimate;\\n\\n        //token being offered\\n        TokenAmount input;\\n\\n        //token wanted\\n        TokenAmount output;\\n    }\\n\\n    //============== CONFIG STATE =============/\\n    struct Config {\\n        //dev team address (120b)\\n        address devTeam;\\n\\n        //bps fee expressed as a whole number\\n        uint128 minFee;\\n\\n        //penalty a user faces for removing assets or \\n        //allowances before a trade\\n        uint128 penaltyFee;\\n\\n        //number of blocks to lock stake and order cancellations\\n        uint8 lockoutBlocks;\\n    }\\n\\n    //============== ACCESS STATE =============/\\n    //storage structure of access controls\\n    struct AccessControl {\\n        bool reentrantFlag;\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    //============== INITIALIZATION STATE =============/\\n    struct InitControls {\\n        bool initialized;\\n        bool initializing;\\n    }\\n}\",\"keccak256\":\"0x2bed02ddc4690dcea29b1e0051fbb74f0e76c03d682394f09a766b22675228a2\",\"license\":\"Unlicense\"},\"contracts/libs/LibAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Types.sol\\\";\\n\\n\\nlibrary LibAccess {\\n    \\n    function hasRole(Types.AccessControl storage ac, bytes32 role, address actor) external view returns (bool) {\\n        return ac.roles[role][actor];\\n    }\\n\\n    function _addRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        ac.roles[role][actor] = true;\\n    }\\n\\n    function _revokeRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        delete ac.roles[role][actor];\\n    }\\n}\",\"keccak256\":\"0x30f51b897619d1a661871173b3572497bf68a4e5d7faaf20ebfffe4137c13984\",\"license\":\"Unlicense\"},\"contracts/libs/LibConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibConfig {\\n\\n\\n    function store(Types.Config storage cs, Types.Config memory config) public {\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n    }\\n\\n    function copy(Types.Config storage config) public view returns(Types.Config memory) {\\n        Types.Config memory cs;\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n        return cs;\\n    }\\n    \\n\\n    //============== VIEWS ================/\\n    \\n    function getDevTeam(Types.Config storage _config) external view returns (address) {\\n        return _config.devTeam;\\n    }\\n\\n    function getLockoutBlocks(Types.Config storage _config) external view returns (uint8) {\\n        return _config.lockoutBlocks;\\n    }\\n\\n    function getMinFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.minFee;\\n    }\\n\\n    function getPenaltyFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    function setDevTeam(Types.Config storage _config, address team) external{\\n        _config.devTeam = team;\\n    }\\n\\n    function setLockoutBlocks(Types.Config storage _config, uint8 blocks) external{\\n        _config.lockoutBlocks = blocks;\\n    }\\n\\n    function setMinFee(Types.Config storage _config, uint128 fee) external{\\n        _config.minFee = fee;\\n    }\\n\\n    function setPenaltyFee(Types.Config storage _config, uint128 fee) external{\\n        _config.penaltyFee = fee;\\n    }\\n    \\n}\",\"keccak256\":\"0xaadcf6273e853a6057f400790831a95320c40940ecba17f12c6f13c4625f3136\",\"license\":\"Unlicense\"},\"contracts/libs/LibStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibStorage {\\n\\n    //keccak256(\\\"com.buidlhub.config.ConfigStorage\\\");\\n    bytes32 constant CONFIG_STORAGE_KEY = 0xf5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b9;\\n\\n     //keccak256(\\\"com.buidlhub.access.AccessControls\\\");\\n    bytes32 constant ACCESS_STORAGE_KEY = 0x3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e9;\\n\\n    //keccak256(\\\"com.buidlhub.init.InitControls\\\");\\n    bytes32 constant INIT_STORAGE_KEY = 0xd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d4741;\\n\\n    //============= STORAGE ACCESSORS ==========/\\n   \\n    function getConfigStorage() internal pure returns (Types.Config storage cs) {\\n        assembly { cs.slot := CONFIG_STORAGE_KEY }\\n    }\\n\\n    function getAccessStorage() internal pure returns (Types.AccessControl storage acs) {\\n        assembly { acs.slot := ACCESS_STORAGE_KEY }\\n    }\\n\\n    function getInitControls() internal pure returns (Types.InitControls storage ic) {\\n        assembly { ic.slot := INIT_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0xfccedc3189a072c7aea9e515018dadf87f8284984b1e6f36d0b058c5876a1c18\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132e4806100206000396000f3fe60806040526004361061012e5760003560e01c80636a9447b5116100ab578063b1cf4b0c1161006f578063b1cf4b0c14610366578063c3f909d414610388578063d547741f146103aa578063e63ab1e9146103ca578063e959b38a146103df578063f102669b146103ff57610176565b80636a9447b5146102cd57806375b238fc146102ef57806377550610146103045780638d3403fd1461031957806391d148541461033957610176565b80633c6141a9116100f25780633c6141a91461021d5780633f51e1821461024b57806340ee75bb1461026b5780634e1c68291461028b5780635cf34bcf146102ab57610176565b8063044218231461017b57806327054df6146101a65780632e1a7d4d146101bb57806333205a22146101dd578063334c3c65146101fd57610176565b3661017657336001600160a01b03167f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c2796243460405161016c919061298f565b60405180910390a2005b600080fd5b34801561018757600080fd5b5061019061041f565b60405161019d919061298f565b60405180910390f35b3480156101b257600080fd5b50610190610443565b3480156101c757600080fd5b506101db6101d636600461278b565b610467565b005b3480156101e957600080fd5b506101db6101f836600461273e565b610552565b34801561020957600080fd5b506101db6102183660046125f3565b610657565b34801561022957600080fd5b5061023d6102383660046126b7565b610700565b60405161019d929190612974565b34801561025757600080fd5b506101db6102663660046125f3565b6107f7565b34801561027757600080fd5b506101db6102863660046124ea565b61087d565b34801561029757600080fd5b506101db6102a636600461276f565b6108dd565b3480156102b757600080fd5b506102c061093d565b60405161019d9190613001565b3480156102d957600080fd5b506102e261095a565b60405161019d91906128fe565b3480156102fb57600080fd5b50610190610973565b34801561031057600080fd5b506102c0610985565b34801561032557600080fd5b506101db6103343660046127bb565b6109a8565b34801561034557600080fd5b506103596103543660046125c4565b6109ff565b60405161019d9190612969565b34801561037257600080fd5b5061037b610a9c565b60405161019d9190613015565b34801561039457600080fd5b5061039d610ab2565b60405161019d9190612eaf565b3480156103b657600080fd5b506101db6103c53660046125c4565b610b4d565b3480156103d657600080fd5b50610190610b9b565b3480156103eb57600080fd5b506101db6103fa3660046125c4565b610bbf565b34801561040b57600080fd5b506101db61041a36600461276f565b610bff565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b610481600080516020613246833981519152610354610c6b565b6104a65760405162461bcd60e51b815260040161049d90612e6d565b60405180910390fd5b478111156104c65760405162461bcd60e51b815260040161049d90612bad565b6104ce610c6b565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610506573d6000803e3d6000fd5b5061050f610c6b565b6001600160a01b03167faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c06682604051610547919061298f565b60405180910390a250565b61057e7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610354610c6b565b61059a5760405162461bcd60e51b815260040161049d90612d47565b6105a2610c6f565b5460ff16156105c35760405162461bcd60e51b815260040161049d90612a29565b60016105cd610c6f565b805460ff191691151591909117905560005a90506105e9612329565b6105f286610c93565b90506105fc612351565b61060587610e16565b90506000606061061783898989610fc4565b9150915061062689858461110e565b61063389838387896113c5565b50505050506000610642610c6f565b805460ff191691151591909117905550505050565b610671600080516020613246833981519152610354610c6b565b61068d5760405162461bcd60e51b815260040161049d90612e6d565b610695611990565b6040516321cab0c760e01b815273f3a0C44D23B8C2B54d2a757271E907782AEF9Da9916321cab0c7916106cd91908590600401612ebd565b60006040518083038186803b1580156106e557600080fd5b505af41580156106f9573d6000803e3d6000fd5b5050505050565b600060603330146107235760405162461bcd60e51b815260040161049d90612cfe565b61073b61073536889003880188612722565b866119b4565b60006060866001600160a01b031663be82f7f68988886040518463ffffffff1660e01b815260040161076f93929190612ed1565b600060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c59190810190612522565b91509150816107e8578060405162461bcd60e51b815260040161049d9190612998565b90925090505b94509492505050565b6000610801611a2b565b8054909150610100900460ff168061081b5750805460ff16155b6108375760405162461bcd60e51b815260040161049d90612df6565b8054610100900460ff1615801561085f57815460ff1961ff0019909116610100171660011782555b61086883611a4f565b801561087857815461ff00191682555b505050565b610897600080516020613246833981519152610354610c6b565b6108b35760405162461bcd60e51b815260040161049d90612e6d565b806108bc611990565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6108f7600080516020613246833981519152610354610c6b565b6109135760405162461bcd60e51b815260040161049d90612e6d565b8061091c611990565b60010180546001600160801b03928316600160801b02921691909117905550565b6000610947611990565b600101546001600160801b031690505b90565b6000610964611990565b546001600160a01b0316905090565b60008051602061324683398151915281565b600061098f611990565b60010154600160801b90046001600160801b0316919050565b6109c2600080516020613246833981519152610354610c6b565b6109de5760405162461bcd60e51b815260040161049d90612e6d565b806109e7611990565b600201805460ff191660ff9290921691909117905550565b6000610a09610c6f565b604051630f40931b60e41b81527374fB0a2BDd8A7dCEc3543F2F3B2CafC429222df79163f40931b091610a43919087908790600401612e90565b60206040518083038186803b158015610a5b57600080fd5b505af4158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190612506565b90505b92915050565b6000610aa6611990565b6002015460ff16905090565b610aba6123a4565b610ac2611990565b604051636d73f0db60e01b815273f3a0C44D23B8C2B54d2a757271E907782AEF9Da991636d73f0db91610af8919060040161298f565b60806040518083038186803b158015610b1057600080fd5b505af4158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b48919061265b565b905090565b610b67600080516020613246833981519152610354610c6b565b610b835760405162461bcd60e51b815260040161049d90612e6d565b610b978282610b90610c6f565b9190611aca565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610bd9600080516020613246833981519152610354610c6b565b610bf55760405162461bcd60e51b815260040161049d90612e6d565b610b978282611af9565b610c19600080516020613246833981519152610354610c6b565b610c355760405162461bcd60e51b815260040161049d90612e6d565b80610c3e611990565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b3390565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b610c9b612329565b610ca482611b0d565b610cc05760405162461bcd60e51b815260040161049d90612cb5565b610cc982611bb0565b610ce55760405162461bcd60e51b815260040161049d90612c6a565b604080516080808201928390528401515184516370a0823160e01b909352909182916001600160a01b0316906370a0823190610d2490608485016128fe565b60206040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906127a3565b81526020018360a00151600001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610dad91906128fe565b60206040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd91906127a3565b815260200160008152602001600081525090505b919050565b610e1e612351565b8160800151600001516001600160a01b031682602001516001600160a01b03161415610fc057610e826040518060400160405280601c81526020017f54616b696e67206665652066726f6d206f757470757420746f6b656e00000000815250611bfc565b60008080610e94858660600151611c3f565b9092509050610ebe610ea68383611ea4565b6080870151602001516001600160701b031690611ec9565b9250610f036040518060400160405280601081526020016f13db19081a5b9c1d5d08185b5bdd5b9d60821b8152508660800151602001516001600160701b0316611ef1565b610f356040518060400160405280601081526020016f13995dc81a5b9c1d5d08185b5bdd5b9d60821b81525084611ef1565b50506040518060c0016040528084600001516001600160a01b0316815260200184602001516001600160a01b03168152602001846040015181526020018460600151815260200160405180604001604052808660800151600001516001600160a01b03168152602001846001600160701b031681525081526020018460a00151815250915050610e11565b5090565b6000606030633c6141a9610fdb619c405a90611ec9565b888888886040518663ffffffff1660e01b8152600401610ffe9493929190612f55565b600060405180830381600088803b15801561101857600080fd5b5087f19350505050801561104e57506040513d6000823e601f3d908101601f1916820160405261104b9190810190612522565b60015b6110d35761105a61307c565b80611065575061109e565b600092508091506110986040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611f36565b506110ce565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000905b6107ee565b81611104576111046040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611f36565b90925090506107ee565b60808301515183516040516370a0823160e01b81526001600160a01b03909216916370a0823191611141916004016128fe565b60206040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119191906127a3565b60408301528061122b576111cd6040518060400160405280600c81526020016b125b9c1d5d0818985b08188d60a21b8152508360000151611ef1565b6112026040518060400160405280600f81526020016e24b7383aba103130b61030b33a32b960891b8152508360400151611ef1565b81516040830151146112265760405162461bcd60e51b815260040161049d90612b5f565b610878565b60a0830151516040516370a0823160e01b81526001600160a01b03909116906370a082319061125e9030906004016128fe565b60206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906127a3565b60608301526040805180820190915260208082527f4f757470757420746f6b656e2062616c616e6365206265666f72652073776170818301528301516112f49190611ef1565b6113376040518060400160405280601981526020017f4f75747075742062616c616e63652061667465722073776170000000000000008152508360600151611ef1565b8260a00151602001516001600160701b031661136483602001518460600151611ec990919063ffffffff16565b10156113825760405162461bcd60e51b815260040161049d90612d6a565b608083015160200151604083015183516001600160701b03909216916113a791611ec9565b11156108785760405162461bcd60e51b815260040161049d90612bf2565b60006113de61c3506113d85a8590611ec9565b90611ea4565b90506114106040518060400160405280600e81526020016d151bdd185b0819d85cc81d5cd95960921b81525082611ef1565b600061141c823a611f7b565b9050611447604051806040016040528060078152602001664761732066656560c81b81525082611ef1565b6000806114548985611c3f565b91509150824710156114ce576114816040518060600160405280603581526020016131eb60359139611bfc565b611489610c6b565b6001600160a01b03167f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda846040516114c1919061298f565b60405180910390a2611596565b61150c6040518060400160405280601c81526020017f5472616e73666572696e67206761732066656520746f2072656c617900000000815250611bfc565b611514610c6b565b6001600160a01b03166108fc849081150290604051600060405180830381858888f1935050505015801561154c573d6000803e3d6000fd5b50611555610c6b565b6001600160a01b03167f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d0578460405161158d919061298f565b60405180910390a25b600088611732578290506115d06040518060400160405280600e81526020016d4661696c6564206761732066656560901b81525082611ef1565b8960800151600001516001600160a01b03168a602001516001600160a01b031614156116915761161760405180606001604052806040815260200161317e60409139611bfc565b895161163f90611625611990565b5460208d01516001600160a01b0390811692911684611fb5565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c6020015184604051611684939291906129ab565b60405180910390a2611701565b6116b260405180608001604052806049815260200161326660499139611bfc565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c6020015160006040516116f8939291906129ab565b60405180910390a25b61172d6040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b815250611bfc565b611984565b61173c8383611ea4565b9050600061175b88602001518960600151611ec990919063ffffffff16565b90506117926040518060400160405280601381526020017211dc9bdcdcc81bdd5d1c1d5d08185b5bdd5b9d606a1b81525082611ef1565b60008b60800151600001516001600160a01b03168c602001516001600160a01b0316141561180c578190506117df6040518060600160405280602d81526020016131be602d913984611ef1565b8b51611807906117ed611990565b5460208f01516001600160a01b0390811692911686611fb5565b61189d565b61184b6040518060400160405280601781526020017f5265647563696e67206f7574707574206279206665657300000000000000000081525084611ef1565b6118558284611ec9565b90506118796040518060600160405280602681526020016132206026913984611ef1565b61189d611884611990565b5460208e01516001600160a01b03908116911685612013565b6118dc6040518060400160405280601e81526020017f53656e64696e6720746f74616c206f757470757420746f20747261646572000081525082611ef1565b8b5160a08d0151516118fa916001600160a01b039091169083612013565b8b600001516001600160a01b03167f3491be8ca1b3f4f9e7e74b9955a4600c2613ce85d639eaa123d5b733f59e93be8d6080015160200151838f60200151898960405161194b959493929190612fca565b60405180910390a26119816040518060400160405280600d81526020016c046696e6973686564207377617609c1b815250611bfc565b50505b50505050505050505050565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b6119fd604051806040016040528060168152602001752a3930b739b332b934b733903a37903937baba32b91d60511b8152508360800151602001516001600160701b0316611ef1565b8151608083015160208101519051610b97926001600160a01b039091169184906001600160701b0316611fb5565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b611a57611990565b6040516321cab0c760e01b815273f3a0C44D23B8C2B54d2a757271E907782AEF9Da9916321cab0c791611a8f91908590600401612ebd565b60006040518083038186803b158015611aa757600080fd5b505af4158015611abb573d6000803e3d6000fd5b50505050611ac7612032565b50565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b610b978282611b06610c6f565b91906120fb565b60808101516020810151905182516040516370a0823160e01b815260009384936001600160701b03909116926001600160a01b03909116916370a0823191611b57916004016128fe565b60206040518083038186803b158015611b6f57600080fd5b505afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba791906127a3565b10159392505050565b6080810151602081015190518251604051636eb1769f60e11b815260009384936001600160701b03909116926001600160a01b039091169163dd62ed3e91611b57913090600401612912565b611ac781604051602401611c109190612998565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261212e565b600080611c806040518060400160405280601981526020017f2d2d2d2d20436f6d707574696e672046656573202d2d2d2d2d00000000000000815250611bfc565b604080518082019091526012815271115cdd1a5b585d19590819d85cc818dbdcdd60721b60208201523a840290611cb79082611ef1565b600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf657600080fd5b505afa158015611d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2e91906127d7565b60ff169050611d578660400151611d5183600a0a85611f7b90919063ffffffff16565b9061214f565b9350611d986040518060400160405280601881526020017f47617320706f7274696f6e20696e2066656520746f6b656e000000000000000081525085611ef1565b8560800151600001516001600160a01b031686602001516001600160a01b03161415611dfb57611df4612710611d51611dcf611990565b6001015460808a0151602001516001600160701b0316906001600160801b0316611f7b565b9250611e34565b611e31612710611d51611e0c611990565b6001015460a08a0151602001516001600160701b0316906001600160801b0316611f7b565b92505b611e5d604051806040016040528060078152602001664250532066656560c81b81525084611ef1565b611e9b6040518060400160405280601a81526020017f2d2d2d2d20456e6420636f6d707574652066656573202d2d2d2d000000000000815250611bfc565b50509250929050565b600082820183811015610a935760405162461bcd60e51b815260040161049d90612a74565b600082821115611eeb5760405162461bcd60e51b815260040161049d90612aab565b50900390565b610b978282604051602401611f07929190612a07565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261212e565b610b978282604051602401611f4c9291906129d9565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261212e565b600082611f8a57506000610a96565b82820282848281611f9757fe5b0414610a935760405162461bcd60e51b815260040161049d90612c29565b61200d846323b872dd60e01b858585604051602401611fd69392919061292c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612181565b50505050565b6108788363a9059cbb60e01b8484604051602401611fd6929190612950565b600061203c611a2b565b8054909150610100900460ff16806120565750805460ff16155b6120725760405162461bcd60e51b815260040161049d90612df6565b8054610100900460ff1615801561209a57815460ff1961ff0019909116610100171660011782555b60006120a4610c6b565b90506120be60008051602061324683398151915282611af9565b6120e87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611af9565b508015610b975750805461ff0019169055565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008082116121705760405162461bcd60e51b815260040161049d90612b28565b81838161217957fe5b049392505050565b60606121d6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122109092919063ffffffff16565b80519091501561087857808060200190518101906121f49190612506565b6108785760405162461bcd60e51b815260040161049d90612e23565b606061221f8484600085612229565b90505b9392505050565b60608247101561224b5760405162461bcd60e51b815260040161049d90612ae2565b612254856122ea565b6122705760405162461bcd60e51b815260040161049d90612dbf565b60006060866001600160a01b0316858760405161228d91906128e2565b60006040518083038185875af1925050503d80600081146122ca576040519150601f19603f3d011682016040523d82523d6000602084013e6122cf565b606091505b50915091506122df8282866122f0565b979650505050505050565b3b151590565b606083156122ff575081612222565b82511561230f5782518084602001fd5b8160405162461bcd60e51b815260040161049d9190612998565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016123926123cb565b815260200161239f6123cb565b905290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b60008083601f8401126123f3578182fd5b50813567ffffffffffffffff81111561240a578182fd5b60208301915083602082850101111561242257600080fd5b9250929050565b6000610100828403121561243b578081fd5b61244560c0613023565b9050813561245281613121565b8152602082013561246281613121565b80602083015250604082013560408201526060820135606082015261248a83608084016124a7565b608082015261249c8360c084016124a7565b60a082015292915050565b6000604082840312156124b8578081fd5b6124c26040613023565b905081356124cf81613121565b815260208201356124df81613144565b602082015292915050565b6000602082840312156124fb578081fd5b8135610a9381613121565b600060208284031215612517578081fd5b8151610a9381613136565b60008060408385031215612534578081fd5b825161253f81613136565b602084015190925067ffffffffffffffff8082111561255c578283fd5b818501915085601f83011261256f578283fd5b81518181111561257d578384fd5b612590601f8201601f1916602001613023565b91508082528660208285010111156125a6578384fd5b6125b781602084016020860161304a565b5080925050509250929050565b600080604083850312156125d6578182fd5b8235915060208301356125e881613121565b809150509250929050565b600060808284031215612604578081fd5b61260e6080613023565b823561261981613121565b8152602083013561262981613159565b6020820152604083013561263c81613159565b6040820152606083013561264f8161316e565b60608201529392505050565b60006080828403121561266c578081fd5b6126766080613023565b825161268181613121565b8152602083015161269181613159565b602082015260408301516126a481613159565b6040820152606083015161264f8161316e565b6000806000808486036101408112156126ce578283fd5b610100808212156126dd578384fd5b86955085013590506126ee81613121565b925061012085013567ffffffffffffffff81111561270a578283fd5b612716878288016123e2565b95989497509550505050565b60006101008284031215612734578081fd5b610a938383612429565b6000806000806101408587031215612754578182fd5b61275e8686612429565b93506101008501356126ee81613121565b600060208284031215612780578081fd5b8135610a9381613159565b60006020828403121561279c578081fd5b5035919050565b6000602082840312156127b4578081fd5b5051919050565b6000602082840312156127cc578081fd5b8135610a938161316e565b6000602082840312156127e8578081fd5b8151610a938161316e565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000815180845261283581602086016020860161304a565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b803561289481613121565b6001600160a01b0316825260208101356128ad81613144565b6001600160701b0381166020840152505050565b80516001600160a01b031682526020908101516001600160701b0316910152565b600082516128f481846020870161304a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600083151582526040602083015261221f604083018461281d565b90815260200190565b600060208252610a93602083018461281d565b6000606082526129be606083018661281d565b6001600160a01b039490941660208301525060400152919050565b6000604082526129ec604083018561281d565b82810360208401526129fe818561281d565b95945050505050565b600060408252612a1a604083018561281d565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f6661696c656420747261646520616374696f6e20646964206e6f74207265667560408201526d6e6420696e7075742066756e647360901b606082015260800190565b60208082526025908201527f496e73756666696369656e742062616c616e636520746f206d616b65207472616040820152643739b332b960d91b606082015260800190565b6020808252601a908201527f5573656420746f6f206d616e7920696e70757420746f6b656e73000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602b908201527f496e73756666696369656e74207370656e6420616c6c6f77616e6365206f6e2060408201526a34b7383aba103a37b5b2b760a91b606082015260800190565b60208082526029908201527f496e73756666696369656e7420696e70757420746f6b656e2062616c616e636560408201526820746f20747261646560b81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b60208082526035908201527f547261646520616374696f6e20646964206e6f74207472616e73666572206f756040820152743a383aba103a37b5b2b739903a37903a3930b232b960591b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610a968284612849565b82815260a081016122226020830184612849565b60006101208535612ee181613121565b6001600160a01b039081168452602087013590612efd82613121565b1660208401526040868101359084015260608087013590840152612f276080808501908801612889565b612f3760c0840160c08801612889565b80610100840152612f4b81840185876127f3565b9695505050505050565b600061014060018060a01b0380885116845280602089015116602085015260408801516040850152606088015160608501526080880151612f9960808601826128c1565b5060a0880151612fac60c08601826128c1565b50861661010084015261012083018190526122df81840185876127f3565b6001600160701b0395909516855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561304257600080fd5b604052919050565b60005b8381101561306557818101518382015260200161304d565b8381111561200d5750506000910152565b60e01c90565b600060443d101561308c57610957565b600481823e6308c379a06130a08251613076565b146130aa57610957565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156130da5750505050610957565b828401925082519150808211156130f45750505050610957565b503d8301602082840101111561310c57505050610957565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114611ac757600080fd5b8015158114611ac757600080fd5b6001600160701b0381168114611ac757600080fd5b6001600160801b0381168114611ac757600080fd5b60ff81168114611ac757600080fdfe5472616e7366657272696e67207061727469616c20696e70757420746f6b656e20746f206465767465616d20666f72206661696c7572652067617320666565735472616e7366657272696e6720666565732066726f6d20696e70757420746f6b656e20746f206465765465616d43616e6e6f74207265696d62757273652072656c61792073696e636520646f206e6f74206861766520656e6f7567682066756e647353656e64696e6720666565732066726f6d206f757470757420746f6b656e20746f207465616da49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177546656520746f6b656e206973206f75747075743b207468657265666f72652063616e6e6f74207265696d6275727365207465616d20666f72206661696c757265206761732066656573a2646970667358221220227c9bd4b5b42a0ddb6847cde96b1754894f8a7900971a74f1dfee1798465c2964736f6c63430007000033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c80636a9447b5116100ab578063b1cf4b0c1161006f578063b1cf4b0c14610366578063c3f909d414610388578063d547741f146103aa578063e63ab1e9146103ca578063e959b38a146103df578063f102669b146103ff57610176565b80636a9447b5146102cd57806375b238fc146102ef57806377550610146103045780638d3403fd1461031957806391d148541461033957610176565b80633c6141a9116100f25780633c6141a91461021d5780633f51e1821461024b57806340ee75bb1461026b5780634e1c68291461028b5780635cf34bcf146102ab57610176565b8063044218231461017b57806327054df6146101a65780632e1a7d4d146101bb57806333205a22146101dd578063334c3c65146101fd57610176565b3661017657336001600160a01b03167f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c2796243460405161016c919061298f565b60405180910390a2005b600080fd5b34801561018757600080fd5b5061019061041f565b60405161019d919061298f565b60405180910390f35b3480156101b257600080fd5b50610190610443565b3480156101c757600080fd5b506101db6101d636600461278b565b610467565b005b3480156101e957600080fd5b506101db6101f836600461273e565b610552565b34801561020957600080fd5b506101db6102183660046125f3565b610657565b34801561022957600080fd5b5061023d6102383660046126b7565b610700565b60405161019d929190612974565b34801561025757600080fd5b506101db6102663660046125f3565b6107f7565b34801561027757600080fd5b506101db6102863660046124ea565b61087d565b34801561029757600080fd5b506101db6102a636600461276f565b6108dd565b3480156102b757600080fd5b506102c061093d565b60405161019d9190613001565b3480156102d957600080fd5b506102e261095a565b60405161019d91906128fe565b3480156102fb57600080fd5b50610190610973565b34801561031057600080fd5b506102c0610985565b34801561032557600080fd5b506101db6103343660046127bb565b6109a8565b34801561034557600080fd5b506103596103543660046125c4565b6109ff565b60405161019d9190612969565b34801561037257600080fd5b5061037b610a9c565b60405161019d9190613015565b34801561039457600080fd5b5061039d610ab2565b60405161019d9190612eaf565b3480156103b657600080fd5b506101db6103c53660046125c4565b610b4d565b3480156103d657600080fd5b50610190610b9b565b3480156103eb57600080fd5b506101db6103fa3660046125c4565b610bbf565b34801561040b57600080fd5b506101db61041a36600461276f565b610bff565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b610481600080516020613246833981519152610354610c6b565b6104a65760405162461bcd60e51b815260040161049d90612e6d565b60405180910390fd5b478111156104c65760405162461bcd60e51b815260040161049d90612bad565b6104ce610c6b565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610506573d6000803e3d6000fd5b5061050f610c6b565b6001600160a01b03167faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c06682604051610547919061298f565b60405180910390a250565b61057e7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610354610c6b565b61059a5760405162461bcd60e51b815260040161049d90612d47565b6105a2610c6f565b5460ff16156105c35760405162461bcd60e51b815260040161049d90612a29565b60016105cd610c6f565b805460ff191691151591909117905560005a90506105e9612329565b6105f286610c93565b90506105fc612351565b61060587610e16565b90506000606061061783898989610fc4565b9150915061062689858461110e565b61063389838387896113c5565b50505050506000610642610c6f565b805460ff191691151591909117905550505050565b610671600080516020613246833981519152610354610c6b565b61068d5760405162461bcd60e51b815260040161049d90612e6d565b610695611990565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c7916106cd91908590600401612ebd565b60006040518083038186803b1580156106e557600080fd5b505af41580156106f9573d6000803e3d6000fd5b5050505050565b600060603330146107235760405162461bcd60e51b815260040161049d90612cfe565b61073b61073536889003880188612722565b866119b4565b60006060866001600160a01b031663be82f7f68988886040518463ffffffff1660e01b815260040161076f93929190612ed1565b600060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c59190810190612522565b91509150816107e8578060405162461bcd60e51b815260040161049d9190612998565b90925090505b94509492505050565b6000610801611a2b565b8054909150610100900460ff168061081b5750805460ff16155b6108375760405162461bcd60e51b815260040161049d90612df6565b8054610100900460ff1615801561085f57815460ff1961ff0019909116610100171660011782555b61086883611a4f565b801561087857815461ff00191682555b505050565b610897600080516020613246833981519152610354610c6b565b6108b35760405162461bcd60e51b815260040161049d90612e6d565b806108bc611990565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6108f7600080516020613246833981519152610354610c6b565b6109135760405162461bcd60e51b815260040161049d90612e6d565b8061091c611990565b60010180546001600160801b03928316600160801b02921691909117905550565b6000610947611990565b600101546001600160801b031690505b90565b6000610964611990565b546001600160a01b0316905090565b60008051602061324683398151915281565b600061098f611990565b60010154600160801b90046001600160801b0316919050565b6109c2600080516020613246833981519152610354610c6b565b6109de5760405162461bcd60e51b815260040161049d90612e6d565b806109e7611990565b600201805460ff191660ff9290921691909117905550565b6000610a09610c6f565b604051630f40931b60e41b815273__$712f9bd20561de4f0bfbc1442284f16fb4$__9163f40931b091610a43919087908790600401612e90565b60206040518083038186803b158015610a5b57600080fd5b505af4158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190612506565b90505b92915050565b6000610aa6611990565b6002015460ff16905090565b610aba6123a4565b610ac2611990565b604051636d73f0db60e01b815273__$015d7794271f690550e5fe4793e4b79169$__91636d73f0db91610af8919060040161298f565b60806040518083038186803b158015610b1057600080fd5b505af4158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b48919061265b565b905090565b610b67600080516020613246833981519152610354610c6b565b610b835760405162461bcd60e51b815260040161049d90612e6d565b610b978282610b90610c6f565b9190611aca565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610bd9600080516020613246833981519152610354610c6b565b610bf55760405162461bcd60e51b815260040161049d90612e6d565b610b978282611af9565b610c19600080516020613246833981519152610354610c6b565b610c355760405162461bcd60e51b815260040161049d90612e6d565b80610c3e611990565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b3390565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b610c9b612329565b610ca482611b0d565b610cc05760405162461bcd60e51b815260040161049d90612cb5565b610cc982611bb0565b610ce55760405162461bcd60e51b815260040161049d90612c6a565b604080516080808201928390528401515184516370a0823160e01b909352909182916001600160a01b0316906370a0823190610d2490608485016128fe565b60206040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906127a3565b81526020018360a00151600001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610dad91906128fe565b60206040518083038186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd91906127a3565b815260200160008152602001600081525090505b919050565b610e1e612351565b8160800151600001516001600160a01b031682602001516001600160a01b03161415610fc057610e826040518060400160405280601c81526020017f54616b696e67206665652066726f6d206f757470757420746f6b656e00000000815250611bfc565b60008080610e94858660600151611c3f565b9092509050610ebe610ea68383611ea4565b6080870151602001516001600160701b031690611ec9565b9250610f036040518060400160405280601081526020016f13db19081a5b9c1d5d08185b5bdd5b9d60821b8152508660800151602001516001600160701b0316611ef1565b610f356040518060400160405280601081526020016f13995dc81a5b9c1d5d08185b5bdd5b9d60821b81525084611ef1565b50506040518060c0016040528084600001516001600160a01b0316815260200184602001516001600160a01b03168152602001846040015181526020018460600151815260200160405180604001604052808660800151600001516001600160a01b03168152602001846001600160701b031681525081526020018460a00151815250915050610e11565b5090565b6000606030633c6141a9610fdb619c405a90611ec9565b888888886040518663ffffffff1660e01b8152600401610ffe9493929190612f55565b600060405180830381600088803b15801561101857600080fd5b5087f19350505050801561104e57506040513d6000823e601f3d908101601f1916820160405261104b9190810190612522565b60015b6110d35761105a61307c565b80611065575061109e565b600092508091506110986040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611f36565b506110ce565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000905b6107ee565b81611104576111046040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611f36565b90925090506107ee565b60808301515183516040516370a0823160e01b81526001600160a01b03909216916370a0823191611141916004016128fe565b60206040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119191906127a3565b60408301528061122b576111cd6040518060400160405280600c81526020016b125b9c1d5d0818985b08188d60a21b8152508360000151611ef1565b6112026040518060400160405280600f81526020016e24b7383aba103130b61030b33a32b960891b8152508360400151611ef1565b81516040830151146112265760405162461bcd60e51b815260040161049d90612b5f565b610878565b60a0830151516040516370a0823160e01b81526001600160a01b03909116906370a082319061125e9030906004016128fe565b60206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906127a3565b60608301526040805180820190915260208082527f4f757470757420746f6b656e2062616c616e6365206265666f72652073776170818301528301516112f49190611ef1565b6113376040518060400160405280601981526020017f4f75747075742062616c616e63652061667465722073776170000000000000008152508360600151611ef1565b8260a00151602001516001600160701b031661136483602001518460600151611ec990919063ffffffff16565b10156113825760405162461bcd60e51b815260040161049d90612d6a565b608083015160200151604083015183516001600160701b03909216916113a791611ec9565b11156108785760405162461bcd60e51b815260040161049d90612bf2565b60006113de61c3506113d85a8590611ec9565b90611ea4565b90506114106040518060400160405280600e81526020016d151bdd185b0819d85cc81d5cd95960921b81525082611ef1565b600061141c823a611f7b565b9050611447604051806040016040528060078152602001664761732066656560c81b81525082611ef1565b6000806114548985611c3f565b91509150824710156114ce576114816040518060600160405280603581526020016131eb60359139611bfc565b611489610c6b565b6001600160a01b03167f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda846040516114c1919061298f565b60405180910390a2611596565b61150c6040518060400160405280601c81526020017f5472616e73666572696e67206761732066656520746f2072656c617900000000815250611bfc565b611514610c6b565b6001600160a01b03166108fc849081150290604051600060405180830381858888f1935050505015801561154c573d6000803e3d6000fd5b50611555610c6b565b6001600160a01b03167f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d0578460405161158d919061298f565b60405180910390a25b600088611732578290506115d06040518060400160405280600e81526020016d4661696c6564206761732066656560901b81525082611ef1565b8960800151600001516001600160a01b03168a602001516001600160a01b031614156116915761161760405180606001604052806040815260200161317e60409139611bfc565b895161163f90611625611990565b5460208d01516001600160a01b0390811692911684611fb5565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c6020015184604051611684939291906129ab565b60405180910390a2611701565b6116b260405180608001604052806049815260200161326660499139611bfc565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c6020015160006040516116f8939291906129ab565b60405180910390a25b61172d6040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b815250611bfc565b611984565b61173c8383611ea4565b9050600061175b88602001518960600151611ec990919063ffffffff16565b90506117926040518060400160405280601381526020017211dc9bdcdcc81bdd5d1c1d5d08185b5bdd5b9d606a1b81525082611ef1565b60008b60800151600001516001600160a01b03168c602001516001600160a01b0316141561180c578190506117df6040518060600160405280602d81526020016131be602d913984611ef1565b8b51611807906117ed611990565b5460208f01516001600160a01b0390811692911686611fb5565b61189d565b61184b6040518060400160405280601781526020017f5265647563696e67206f7574707574206279206665657300000000000000000081525084611ef1565b6118558284611ec9565b90506118796040518060600160405280602681526020016132206026913984611ef1565b61189d611884611990565b5460208e01516001600160a01b03908116911685612013565b6118dc6040518060400160405280601e81526020017f53656e64696e6720746f74616c206f757470757420746f20747261646572000081525082611ef1565b8b5160a08d0151516118fa916001600160a01b039091169083612013565b8b600001516001600160a01b03167f3491be8ca1b3f4f9e7e74b9955a4600c2613ce85d639eaa123d5b733f59e93be8d6080015160200151838f60200151898960405161194b959493929190612fca565b60405180910390a26119816040518060400160405280600d81526020016c046696e6973686564207377617609c1b815250611bfc565b50505b50505050505050505050565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b6119fd604051806040016040528060168152602001752a3930b739b332b934b733903a37903937baba32b91d60511b8152508360800151602001516001600160701b0316611ef1565b8151608083015160208101519051610b97926001600160a01b039091169184906001600160701b0316611fb5565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b611a57611990565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c791611a8f91908590600401612ebd565b60006040518083038186803b158015611aa757600080fd5b505af4158015611abb573d6000803e3d6000fd5b50505050611ac7612032565b50565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b610b978282611b06610c6f565b91906120fb565b60808101516020810151905182516040516370a0823160e01b815260009384936001600160701b03909116926001600160a01b03909116916370a0823191611b57916004016128fe565b60206040518083038186803b158015611b6f57600080fd5b505afa158015611b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba791906127a3565b10159392505050565b6080810151602081015190518251604051636eb1769f60e11b815260009384936001600160701b03909116926001600160a01b039091169163dd62ed3e91611b57913090600401612912565b611ac781604051602401611c109190612998565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261212e565b600080611c806040518060400160405280601981526020017f2d2d2d2d20436f6d707574696e672046656573202d2d2d2d2d00000000000000815250611bfc565b604080518082019091526012815271115cdd1a5b585d19590819d85cc818dbdcdd60721b60208201523a840290611cb79082611ef1565b600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf657600080fd5b505afa158015611d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2e91906127d7565b60ff169050611d578660400151611d5183600a0a85611f7b90919063ffffffff16565b9061214f565b9350611d986040518060400160405280601881526020017f47617320706f7274696f6e20696e2066656520746f6b656e000000000000000081525085611ef1565b8560800151600001516001600160a01b031686602001516001600160a01b03161415611dfb57611df4612710611d51611dcf611990565b6001015460808a0151602001516001600160701b0316906001600160801b0316611f7b565b9250611e34565b611e31612710611d51611e0c611990565b6001015460a08a0151602001516001600160701b0316906001600160801b0316611f7b565b92505b611e5d604051806040016040528060078152602001664250532066656560c81b81525084611ef1565b611e9b6040518060400160405280601a81526020017f2d2d2d2d20456e6420636f6d707574652066656573202d2d2d2d000000000000815250611bfc565b50509250929050565b600082820183811015610a935760405162461bcd60e51b815260040161049d90612a74565b600082821115611eeb5760405162461bcd60e51b815260040161049d90612aab565b50900390565b610b978282604051602401611f07929190612a07565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261212e565b610b978282604051602401611f4c9291906129d9565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261212e565b600082611f8a57506000610a96565b82820282848281611f9757fe5b0414610a935760405162461bcd60e51b815260040161049d90612c29565b61200d846323b872dd60e01b858585604051602401611fd69392919061292c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612181565b50505050565b6108788363a9059cbb60e01b8484604051602401611fd6929190612950565b600061203c611a2b565b8054909150610100900460ff16806120565750805460ff16155b6120725760405162461bcd60e51b815260040161049d90612df6565b8054610100900460ff1615801561209a57815460ff1961ff0019909116610100171660011782555b60006120a4610c6b565b90506120be60008051602061324683398151915282611af9565b6120e87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611af9565b508015610b975750805461ff0019169055565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008082116121705760405162461bcd60e51b815260040161049d90612b28565b81838161217957fe5b049392505050565b60606121d6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122109092919063ffffffff16565b80519091501561087857808060200190518101906121f49190612506565b6108785760405162461bcd60e51b815260040161049d90612e23565b606061221f8484600085612229565b90505b9392505050565b60608247101561224b5760405162461bcd60e51b815260040161049d90612ae2565b612254856122ea565b6122705760405162461bcd60e51b815260040161049d90612dbf565b60006060866001600160a01b0316858760405161228d91906128e2565b60006040518083038185875af1925050503d80600081146122ca576040519150601f19603f3d011682016040523d82523d6000602084013e6122cf565b606091505b50915091506122df8282866122f0565b979650505050505050565b3b151590565b606083156122ff575081612222565b82511561230f5782518084602001fd5b8160405162461bcd60e51b815260040161049d9190612998565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016123926123cb565b815260200161239f6123cb565b905290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b60008083601f8401126123f3578182fd5b50813567ffffffffffffffff81111561240a578182fd5b60208301915083602082850101111561242257600080fd5b9250929050565b6000610100828403121561243b578081fd5b61244560c0613023565b9050813561245281613121565b8152602082013561246281613121565b80602083015250604082013560408201526060820135606082015261248a83608084016124a7565b608082015261249c8360c084016124a7565b60a082015292915050565b6000604082840312156124b8578081fd5b6124c26040613023565b905081356124cf81613121565b815260208201356124df81613144565b602082015292915050565b6000602082840312156124fb578081fd5b8135610a9381613121565b600060208284031215612517578081fd5b8151610a9381613136565b60008060408385031215612534578081fd5b825161253f81613136565b602084015190925067ffffffffffffffff8082111561255c578283fd5b818501915085601f83011261256f578283fd5b81518181111561257d578384fd5b612590601f8201601f1916602001613023565b91508082528660208285010111156125a6578384fd5b6125b781602084016020860161304a565b5080925050509250929050565b600080604083850312156125d6578182fd5b8235915060208301356125e881613121565b809150509250929050565b600060808284031215612604578081fd5b61260e6080613023565b823561261981613121565b8152602083013561262981613159565b6020820152604083013561263c81613159565b6040820152606083013561264f8161316e565b60608201529392505050565b60006080828403121561266c578081fd5b6126766080613023565b825161268181613121565b8152602083015161269181613159565b602082015260408301516126a481613159565b6040820152606083015161264f8161316e565b6000806000808486036101408112156126ce578283fd5b610100808212156126dd578384fd5b86955085013590506126ee81613121565b925061012085013567ffffffffffffffff81111561270a578283fd5b612716878288016123e2565b95989497509550505050565b60006101008284031215612734578081fd5b610a938383612429565b6000806000806101408587031215612754578182fd5b61275e8686612429565b93506101008501356126ee81613121565b600060208284031215612780578081fd5b8135610a9381613159565b60006020828403121561279c578081fd5b5035919050565b6000602082840312156127b4578081fd5b5051919050565b6000602082840312156127cc578081fd5b8135610a938161316e565b6000602082840312156127e8578081fd5b8151610a938161316e565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000815180845261283581602086016020860161304a565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b803561289481613121565b6001600160a01b0316825260208101356128ad81613144565b6001600160701b0381166020840152505050565b80516001600160a01b031682526020908101516001600160701b0316910152565b600082516128f481846020870161304a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600083151582526040602083015261221f604083018461281d565b90815260200190565b600060208252610a93602083018461281d565b6000606082526129be606083018661281d565b6001600160a01b039490941660208301525060400152919050565b6000604082526129ec604083018561281d565b82810360208401526129fe818561281d565b95945050505050565b600060408252612a1a604083018561281d565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f6661696c656420747261646520616374696f6e20646964206e6f74207265667560408201526d6e6420696e7075742066756e647360901b606082015260800190565b60208082526025908201527f496e73756666696369656e742062616c616e636520746f206d616b65207472616040820152643739b332b960d91b606082015260800190565b6020808252601a908201527f5573656420746f6f206d616e7920696e70757420746f6b656e73000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602b908201527f496e73756666696369656e74207370656e6420616c6c6f77616e6365206f6e2060408201526a34b7383aba103a37b5b2b760a91b606082015260800190565b60208082526029908201527f496e73756666696369656e7420696e70757420746f6b656e2062616c616e636560408201526820746f20747261646560b81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b60208082526035908201527f547261646520616374696f6e20646964206e6f74207472616e73666572206f756040820152743a383aba103a37b5b2b739903a37903a3930b232b960591b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610a968284612849565b82815260a081016122226020830184612849565b60006101208535612ee181613121565b6001600160a01b039081168452602087013590612efd82613121565b1660208401526040868101359084015260608087013590840152612f276080808501908801612889565b612f3760c0840160c08801612889565b80610100840152612f4b81840185876127f3565b9695505050505050565b600061014060018060a01b0380885116845280602089015116602085015260408801516040850152606088015160608501526080880151612f9960808601826128c1565b5060a0880151612fac60c08601826128c1565b50861661010084015261012083018190526122df81840185876127f3565b6001600160701b0395909516855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561304257600080fd5b604052919050565b60005b8381101561306557818101518382015260200161304d565b8381111561200d5750506000910152565b60e01c90565b600060443d101561308c57610957565b600481823e6308c379a06130a08251613076565b146130aa57610957565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156130da5750505050610957565b828401925082519150808211156130f45750505050610957565b503d8301602082840101111561310c57505050610957565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114611ac757600080fd5b8015158114611ac757600080fd5b6001600160701b0381168114611ac757600080fd5b6001600160801b0381168114611ac757600080fd5b60ff81168114611ac757600080fdfe5472616e7366657272696e67207061727469616c20696e70757420746f6b656e20746f206465767465616d20666f72206661696c7572652067617320666565735472616e7366657272696e6720666565732066726f6d20696e70757420746f6b656e20746f206465765465616d43616e6e6f74207265696d62757273652072656c61792073696e636520646f206e6f74206861766520656e6f7567682066756e647353656e64696e6720666565732066726f6d206f757470757420746f6b656e20746f207465616da49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177546656520746f6b656e206973206f75747075743b207468657265666f72652063616e6e6f74207265696d6275727365207465616d20666f72206661696c757265206761732066656573a2646970667358221220227c9bd4b5b42a0ddb6847cde96b1754894f8a7900971a74f1dfee1798465c2964736f6c63430007000033",
  "libraries": {
    "LibAccess": "0x74fB0a2BDd8A7dCEc3543F2F3B2CafC429222df7",
    "LibConfig": "0xf3a0C44D23B8C2B54d2a757271E907782AEF9Da9",
    "LibGas": "0x33eeAEea8B408053B4DD86f83296D3021E67d01A",
    "ProxyAdmin": "0xd12b2d583a33d422b8279ab70ade06c56bd9884c",
    "Settlement": "0x832F2AEcAA3fDdCb3A805E56932fca98CD413E8C",
    "SushiswapDex": "0x753D2D13C7C2413E84c2ea841C3511aB102D883b",
    "TransparentUpgradeableProxy": "0x2d57690EBA381611C77069fbcfC79D4806a4e53e",
    "UniswapDex": "0xD988AA4106533d955BfcC5F72D594F3ffb9b3E10",
    "ZrxRouter": "0xdf635fcB617Aa44b306d58E8F6Fc597b566Ec074"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fill((address,address,uint256,uint256,(address,uint112),(address,uint112)),address,bytes)": {
        "notice": "Fill an order using the given router and forwarded call data."
      },
      "getConfig()": {
        "notice": "Get the current configuration struct"
      },
      "getDevTeam()": {
        "notice": "Get the dev team wallet/multi-sig address"
      },
      "getLockoutBlocks()": {
        "notice": "Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw."
      },
      "getMinFee()": {
        "notice": "Get the minimum fee required for all orders"
      },
      "getPenaltyFee()": {
        "notice": "Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain."
      },
      "setConfig((address,uint128,uint128,uint8))": {
        "notice": "Set the current configuration as a bulk setting"
      },
      "setDevTeam(address)": {
        "notice": "Set the dev team wallet/multi-sig address"
      },
      "setLockoutBlocks(uint8)": {
        "notice": "Set the number of blocks to wait before thawed withdraws are allowed"
      },
      "setMinFee(uint128)": {
        "notice": "Set the minimum fee for an order execution"
      },
      "setPenaltyFee(uint128)": {
        "notice": "Set the penalty assessed when a user removes tokens or gas tank funds"
      },
      "withdraw(uint256)": {
        "notice": "Team's ability to withdraw ETH balance from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}