{
  "address": "0x49972Ff4CFA973707CeCb91e5EAcf876ef553031",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "TraderPenalized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "fee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "dexFee",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Types.OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_trySwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "failReason",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "addRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "availableForUse",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "availableGasForWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositGas",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "fee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "dexFee",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Types.OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDevTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockoutBlocks",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenaltyFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "due",
          "type": "uint256"
        }
      ],
      "name": "hasEnoughGas",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        }
      ],
      "name": "requestWithdrawGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "team",
          "type": "address"
        }
      ],
      "name": "setDevTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "blocks",
          "type": "uint8"
        }
      ],
      "name": "setLockoutBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setPenaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "thawingFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        }
      ],
      "name": "withdrawGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcea2272ec07106583623dc1d559dc19274af4c8048448a7834ceff1bdae7d17c",
  "receipt": {
    "to": null,
    "from": "0xBf341c95C52181D4eCa6cf10c3f17316FD262E39",
    "contractAddress": "0x49972Ff4CFA973707CeCb91e5EAcf876ef553031",
    "transactionIndex": 0,
    "gasUsed": "2771602",
    "logsBloom": "0x
    "blockHash": "0x7fe6f724f1deffc944cee16b28a308754f2049b0bcd64e7b3dc7018bf5f35119",
    "transactionHash": "0xcea2272ec07106583623dc1d559dc19274af4c8048448a7834ceff1bdae7d17c",
    "logs": [],
    "blockNumber": 24242717,
    "cumulativeGasUsed": "2771602",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "905207ac38a7ab76b0709de0c6cc6552",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TraderPenalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dexFee\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Types.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_trySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"failReason\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"availableForUse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"availableGasForWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dexFee\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Types.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockoutBlocks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"name\":\"hasEnoughGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"requestWithdrawGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setDevTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blocks\",\"type\":\"uint8\"}],\"name\":\"setLockoutBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setPenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"thawingFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"withdrawGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableForUse(address)\":{\"notice\":\"Determine the amount of eth available to use to pay for fees. This includes  any thawing funds that have not yet reached the thaw expiration block.\"},\"availableGasForWithdraw(address)\":{\"notice\":\"Determine how much of the gas tank balance is available for withdraw after having  waited a sufficient thaw period.\"},\"depositGas()\":{\"notice\":\"Deposit funds into the gas tank\"},\"fill((uint128,uint128,address,uint8,(address,uint112),(address,uint112)),address,bytes)\":{\"notice\":\"Fill an order using the given router and forwarded call data.\"},\"getConfig()\":{\"notice\":\"Get the current configuration struct\"},\"getDevTeam()\":{\"notice\":\"Get the dev team wallet/multi-sig address\"},\"getLockoutBlocks()\":{\"notice\":\"Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw.\"},\"getMinFee()\":{\"notice\":\"Get the minimum fee required for all orders\"},\"getPenaltyFee()\":{\"notice\":\"Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain.\"},\"requestWithdrawGas(uint112)\":{\"notice\":\"Request that funds be thawed and prepared for withdraw after thaw period expires.\"},\"setConfig((address,uint128,uint128,uint8))\":{\"notice\":\"Set the current configuration as a bulk setting\"},\"setDevTeam(address)\":{\"notice\":\"Set the dev team wallet/multi-sig address\"},\"setLockoutBlocks(uint8)\":{\"notice\":\"Set the number of blocks to wait before thawed withdraws are allowed\"},\"setMinFee(uint128)\":{\"notice\":\"Set the minimum fee for an order execution\"},\"setPenaltyFee(uint128)\":{\"notice\":\"Set the penalty assessed when a user removes tokens or gas tank funds\"},\"thawingFunds(address)\":{\"notice\":\"Determine the amount of funds actively awaiting the thaw period.\"},\"withdrawGas(uint112)\":{\"notice\":\"Withdraw fully thawed funds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Settlement.sol\":\"Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/BaseAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./libs/LibAccess.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseAccess {\\n    using LibAccess for Types.AccessControl;\\n    \\n\\n    //bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n    //bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = 0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a;\\n    //bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = 0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7;\\n    //bytes32 public constant ACTION_ROLE = keccak256(\\\"ACTION_ROLE\\\");\\n    bytes32 public constant ACTION_ROLE = 0xd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e;\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function hasRole(bytes32 role, address actor) public view returns (bool) {\\n        return LibStorage.getAccessStorage().hasRole(role, actor);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Not pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelay() {\\n        require(hasRole(RELAY_ROLE, _msgSender()), \\\"Not relay\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        Types.InitControls storage ic = LibStorage.getInitControls();\\n        require(ic.initializing || !ic.initialized, \\\"Already initialized\\\");\\n        \\n        bool tlc = !ic.initializing;\\n        if(tlc) {\\n            ic.initializing = true;\\n            ic.initialized = true;\\n        }\\n        _;\\n        if(tlc) {\\n            ic.initializing = false;\\n        }\\n    }\\n\\n    modifier nonReentrant() {\\n        \\n        require(!LibStorage.getAccessStorage().reentrantFlag, \\\"Attempting to re-enter function recursively\\\");\\n        LibStorage.getAccessStorage().reentrantFlag = true;\\n        _;\\n        LibStorage.getAccessStorage().reentrantFlag = false;\\n    }\\n\\n    //================ MUTATIONS ===============/\\n    \\n    function addRole(bytes32 role, address actor) public onlyAdmin {\\n        _setupRole(role, actor);\\n    }\\n\\n    function revokeRole(bytes32 role, address actor) public onlyAdmin {\\n        LibStorage.getAccessStorage()._revokeRole(role, actor);\\n    }\\n\\n    function _setupRole(bytes32 role, address actor) internal {\\n        LibStorage.getAccessStorage()._addRole(role, actor);\\n    }\\n\\n    function initAccess() internal initializer {\\n        address o = _msgSender();\\n        _setupRole(ADMIN_ROLE, o);\\n        _setupRole(PAUSER_ROLE, o);\\n    }\\n}\",\"keccak256\":\"0x8e62750fb7ef12eedae53245274a9527eba1ada13e6744b024398deeec13af21\",\"license\":\"Unlicense\"},\"contracts/BaseConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./libs/LibConfig.sol\\\";\\nimport \\\"./BaseAccess.sol\\\";\\n\\nabstract contract BaseConfig is BaseAccess {\\n    using LibConfig for Types.Config;\\n   \\n    /**\\n     * Initialize config settings. This is called at initialization time when contracts \\n     * are first deployed.\\n     */\\n    function initConfig(Types.Config memory config) internal {\\n        LibStorage.getConfigStorage().store(config);\\n        BaseAccess.initAccess();\\n    }\\n\\n    /**\\n     * Get the current configuration struct\\n     */\\n    function getConfig() external view returns (Types.Config memory) {\\n        return LibStorage.getConfigStorage().copy();\\n    }\\n\\n    \\n    \\n    //============== VIEWS ================/\\n    /**\\n     * Get the dev team wallet/multi-sig address\\n     */\\n    function getDevTeam() external view returns (address) {\\n        return LibStorage.getConfigStorage().devTeam;\\n    }\\n\\n    /**\\n     * Get the number of blocks to wait before trader can withdraw gas tank funds \\n     * marked for withdraw.\\n     */\\n    function getLockoutBlocks() external view returns (uint8) {\\n        return LibStorage.getConfigStorage().lockoutBlocks;\\n    }\\n\\n    /**\\n     * Get the minimum fee required for all orders\\n     */\\n    function getMinFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().minFee;\\n    }\\n\\n    /**\\n     * Get the penalty fee to asses when trader removes tokens or funds after\\n     * Dexible submits orders on-chain.\\n     */\\n    function getPenaltyFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    /**\\n     * Set the current configuration as a bulk setting\\n     */\\n    function setConfig(Types.Config memory config) public onlyAdmin {\\n        LibStorage.getConfigStorage().store(config);\\n    }\\n\\n    /**\\n     * Set the dev team wallet/multi-sig address\\n     */\\n    function setDevTeam( address team) external{\\n        LibStorage.getConfigStorage().devTeam = team;\\n    }\\n\\n    /**\\n     * Set the number of blocks to wait before thawed withdraws are allowed\\n     */\\n    function setLockoutBlocks(uint8 blocks) external{\\n        LibStorage.getConfigStorage().lockoutBlocks = blocks;\\n    }\\n\\n    /**\\n     * Set the minimum fee for an order execution\\n     */\\n    function setMinFee(uint128 fee) external{\\n        LibStorage.getConfigStorage().minFee = fee;\\n    }\\n\\n    /**\\n     * Set the penalty assessed when a user removes tokens or gas tank funds\\n     */\\n    function setPenaltyFee(uint128 fee) external{\\n        LibStorage.getConfigStorage().penaltyFee = fee;\\n    }\\n}\",\"keccak256\":\"0xa026efb10aa4b03f88eec70d48ba3a3c661df32006da480ce8ded32e763e9a21\",\"license\":\"Unlicense\"},\"contracts/GasTank.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseConfig.sol\\\";\\nimport \\\"./libs/LibGas.sol\\\";\\n\\nabstract contract GasTank is BaseConfig {\\n    using LibGas for Types.GasBalances;\\n\\n    //========== VIEWS =============/\\n    /**\\n     * Determine how much of the gas tank balance is available for withdraw after having \\n     * waited a sufficient thaw period.\\n     */\\n    function availableGasForWithdraw(address owner) external view returns (uint256) {\\n        return LibStorage.getGasStorage().availableForWithdraw(owner);\\n    }\\n\\n    /**\\n     * Determine the amount of eth available to use to pay for fees. This includes \\n     * any thawing funds that have not yet reached the thaw expiration block.\\n     */\\n    function availableForUse(address owner) external view returns (uint256) {\\n        return LibStorage.getGasStorage().availableForUse(owner);\\n    }\\n\\n    /**\\n     * Determine the amount of funds actively awaiting the thaw period.\\n     */\\n    function thawingFunds(address owner) external view returns (uint256) {\\n        return LibStorage.getGasStorage().thawingFunds(owner);\\n    }\\n\\n\\n    // @dev check whether the given holder has enough gas to pay the bill\\n    function hasEnoughGas(address holder, uint256 due) external view returns (bool) {\\n        return LibStorage.getGasStorage().availableForUse(holder) >= due;\\n    }\\n\\n\\n    // ========= MUTATIONS =============/\\n    /**\\n     * Deposit funds into the gas tank\\n     */\\n    function depositGas() external payable {\\n        require(msg.value > 0, \\\"No funds provided for gas deposit\\\");\\n        LibStorage.getGasStorage().deposit(_msgSender(), uint112(msg.value));\\n    }\\n\\n    /**\\n     * Request that funds be thawed and prepared for withdraw after thaw period expires.\\n     */\\n    function requestWithdrawGas(uint112 amount) external {\\n        require(amount > 0, \\\"Cannot withdraw 0 amount\\\");\\n        LibStorage.getGasStorage().thaw(_msgSender(),amount);\\n    }\\n\\n    /**\\n     * Withdraw fully thawed funds.\\n     */\\n    function withdrawGas(uint112 amount) external nonReentrant {\\n        require(amount > 0, \\\"Cannot withdraw 0 amount\\\");\\n        LibStorage.getGasStorage().withdraw(_msgSender(), amount);\\n        _msgSender().transfer(amount);\\n    }\\n\\n    /**\\n     * Deduct the given amount from a trader's available funds.\\n     */\\n    function deduct(address trader, uint112 amount) internal {\\n        LibStorage.getGasStorage().deduct(trader, amount);\\n    }\\n}\",\"keccak256\":\"0x3248d504152bf27af181811f855626fae2faef6c8f32222a9c3e0529aee8e732\",\"license\":\"Unlicense\"},\"contracts/IDexRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * Abstraction of DEX integration with simple fill function.\\n */\\ninterface IDexRouter {\\n\\n    /**\\n     * Fill an order using the given call data details.\\n     */\\n    function fill(Types.Order memory order, bytes calldata swapData) external returns (bool status, string memory failReason);\\n}\",\"keccak256\":\"0x533da7b055fefcaa060117c9a400dd5a2d94c9427f5c1acf2609bc974be744ae\",\"license\":\"Unlicense\"},\"contracts/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IDexRouter.sol\\\";\\nimport \\\"./GasTank.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\ncontract Settlement is GasTank {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n    using SafeMath for uint128;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //============= EVENT DEFS =================/\\n    event TraderPenalized(address indexed trader, uint256 penalty, uint256 gasPaid, string reason);\\n    event SwapFailed(address indexed trader, uint gasPaid, string reason);\\n    event SwapSuccess(address indexed trader,\\n                       address indexed executor, \\n                       uint inputAmount,\\n                       uint outputAmount,\\n                       uint fee,\\n                       uint gasPaid);\\n\\n    //============== CONSTANTS ==============/\\n    //estimate gas usage for testing a user's deposit\\n    uint256 constant GAS_ESTIMATE = 450_000;\\n\\n    //extra overhead for transferring funds\\n    uint256 constant GAS_OVERHEAD = 60_000;\\n\\n    //gas needed after action executes\\n    uint256 constant OP_GAS = 80_000;\\n\\n    struct BalTracking {\\n        uint256 inBal;\\n        uint256 outBal;\\n        uint256 afterIn;\\n        uint256 afterOut;\\n    }\\n\\n    /**\\n     * Fill an order using the given router and forwarded call data.\\n     */\\n    function fill(Types.Order memory order, IDexRouter router, bytes calldata data) public onlyRelay nonReentrant {\\n\\n        uint256 startGas = gasleft();\\n        //pre-trade condition checks\\n        BalTracking memory _tracker = _preCheck(order);\\n\\n        //execute action\\n        (bool success, string memory failReason) = performFill(order, router, data);\\n\\n        //post-trade condition check\\n        _postCheck(order, _tracker, success);\\n\\n        //post-trade actions to transfer fees, etc.\\n        _postActions(order, success, failReason, _tracker, startGas);\\n    } \\n\\n    // @dev initialize the settlement contract \\n    function initialize(Types.Config memory config) public initializer {\\n        BaseConfig.initConfig(config);\\n    }\\n\\n\\n    // @dev whether the trader has gas funds to support order at the given gas price\\n    function _hasFunds(Types.Order memory order, uint256 gasPrice) internal view returns (bool) {\\n        uint256 gas = GAS_ESTIMATE.mul(gasPrice);\\n        uint256 total = gas.add(order.fee)\\n                           .add(order.dexFee)\\n                           .add(LibStorage.getConfigStorage().penaltyFee);\\n        \\n        bool b = this.hasEnoughGas(order.trader, total);\\n        return b;\\n    }\\n\\n    // @dev whether the trader has a token balance to support input side of order\\n    function _hasTokens(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.balanceOf(order.trader) >= order.input.amount;\\n        return b;\\n    }\\n\\n    // @dev whether the trader has approved this contract to spend enought for order\\n    function _canSpend(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.allowance(order.trader, address(this)) >= order.input.amount;\\n        return b;\\n    }\\n\\n    function _preCheck(Types.Order memory order) internal view returns (BalTracking memory) {\\n        require(_hasFunds(order, tx.gasprice), \\\"Insufficient gas tank funds\\\");\\n        require(_hasTokens(order), \\\"Insufficient input token balance to trade\\\");\\n        require(_canSpend(order), \\\"Insufficient spend allowance on input token\\\");\\n        //before balances\\n        return BalTracking(\\n            order.input.token.balanceOf(order.trader),\\n            order.output.token.balanceOf(order.trader),\\n            0,0\\n        );\\n    }\\n\\n    function _preActions(Types.Order memory order, IDexRouter router) internal {\\n        //transfer input tokens to router so it can perform dex trades\\n        order.input.token.safeTransferFrom(order.trader, address(router), order.input.amount);\\n        if(order.dexFee > 0) {\\n            //pay ETH fee to DEX if rquired\\n            payable(address(router)).transfer(order.dexFee);\\n        }\\n    }\\n\\n    function performFill(Types.Order memory order, IDexRouter router, bytes calldata data) internal returns (bool success, string memory failReason) {\\n        //execute action. This is critical that we use our own internal call to actually\\n        //perform swap inside trycatch. This way, transferred funds to script are \\n        //reverted if swap fails\\n        try this._trySwap{\\n            gas: gasleft().sub(OP_GAS)\\n        }(order, router, data) returns (bool _success, string memory _failReason) {\\n            return (_success, _failReason);\\n        } catch Error(string memory err) {\\n            success = false;\\n            failReason = err;\\n        } catch {\\n            success = false;\\n            failReason = \\\"Unknown fail reason\\\";\\n        }\\n    }\\n\\n    function _trySwap(Types.Order calldata order, IDexRouter router, bytes calldata data) external returns (bool success, string memory failReason) {\\n        require(msg.sender == address(this), \\\"Can only be called by settlement contract\\\");\\n        _preActions(order, router);\\n        (bool s, string memory err) = router.fill(order, data);\\n        if(!s) {\\n            revert(err);\\n        }\\n        return (s, err);\\n    }\\n\\n    function _postCheck(Types.Order memory order, BalTracking memory _tracking, bool success) internal view {\\n        \\n        _tracking.afterIn = order.input.token.balanceOf(order.trader);\\n\\n        if(!success) {\\n            //have to revert if funds were not refunded in order to roll everything back.\\n            //in this case, the router is at fault, which is Dexible's fault and therefore \\n            //Dexible relay address should eat the cost of failure\\n            console.log(\\\"Input bal b4\\\", _tracking.inBal);\\n            console.log(\\\"Input bal after\\\", _tracking.afterIn);\\n            require(_tracking.afterIn == _tracking.inBal, \\\"failed trade action did not refund input funds\\\");\\n        } else {\\n            _tracking.afterOut = order.output.token.balanceOf(order.trader);\\n            //if the in/out amounts don't line up, then transfers weren't made properly in the\\n            //router.\\n\\n            console.log(\\\"Trader token balance before swap\\\", _tracking.outBal);\\n            console.log(\\\"New trader balance\\\", _tracking.afterOut);\\n            require(_tracking.afterOut.sub(_tracking.outBal) >= order.output.amount, \\\"Trade action did not transfer output tokens to trader\\\");\\n            require(_tracking.afterIn < _tracking.inBal, \\\"Input tokens not used!\\\");\\n            require(_tracking.inBal.sub(_tracking.afterIn) <= order.input.amount, \\\"Used too many input tokens\\\");\\n            \\n        }\\n          \\n    }\\n\\n    function _postActions(Types.Order memory order, \\n                          bool success, \\n                          string memory failReason, \\n                          BalTracking memory _tracking,\\n                          uint startGas) internal {\\n        if(!success) {\\n            //pay relayer back their gas but take no fee\\n            uint256 totalGasUsed = startGas.sub(gasleft()).add(GAS_OVERHEAD);\\n            uint256 gasFee = totalGasUsed.mul(tx.gasprice);\\n            deduct(order.trader, uint112(gasFee));\\n             //tell trader it failed\\n            emit SwapFailed(order.trader, gasFee, failReason);\\n\\n            //console.log(\\\"Paying gas\\\", gasFee);\\n            _msgSender().transfer(gasFee);\\n        } else {\\n            //otherwise, pay fee and gas\\n            uint256 totalGasUsed = startGas.sub(gasleft()).add(GAS_OVERHEAD);\\n            uint256 gasFee = totalGasUsed.mul(tx.gasprice);\\n            deduct(order.trader, uint112(gasFee.add(order.fee).add(order.dexFee)));\\n\\n            _msgSender().transfer(gasFee);\\n            payable(LibStorage.getConfigStorage().devTeam).transfer(order.fee);\\n            console.log(\\\"Successful swap\\\");\\n            emit SwapSuccess(order.trader,\\n                        _msgSender(),\\n                        _tracking.inBal.sub(_tracking.afterIn),\\n                        _tracking.afterOut.sub(_tracking.outBal),\\n                        order.fee.add(order.dexFee),\\n                        gasFee);\\n        }\\n    }\\n}\",\"keccak256\":\"0xae40f4433b7e0688b9dbada45fb6c9ee1910ff3503ee2cb1c5a8fd03ce21ad97\",\"license\":\"Unlicense\"},\"contracts/Types.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Types {\\n\\n    struct TokenAmount {\\n        IERC20 token;\\n        uint112 amount;\\n    }\\n\\n    //status of order. Only tracked on action from user/miners\\n    enum OrderStatus {\\n        UNDEFINED,\\n        PENDING,\\n        FILLED,\\n        CANCELLED,\\n        PENALIZED\\n    }\\n\\n\\n    enum OrderType {\\n        EXACT_IN,\\n        EXACT_OUT\\n    }\\n\\n    struct Order {\\n\\n        //fee offered (120+128 = 248)\\n        uint128 fee;\\n\\n        //the fee that needs to be paid to a target DEX in ETH\\n        uint128 dexFee;\\n\\n        //trader that owns the order\\n        address trader;\\n\\n        //the type of trade being made\\n        OrderType orderType;\\n\\n        //token being offered\\n        TokenAmount input;\\n\\n        //token wanted\\n        TokenAmount output;\\n    }\\n\\n    /**\\n     * A trader's gas tank balance and any amount that's \\n     * thawing waiting for withdraw.\\n     */\\n    struct Gas {\\n        //available balance used to pay for fees\\n        uint112 balance;\\n\\n        //amount user is asking to withdraw after a that period expires\\n        uint112 thawing;\\n\\n        //the block at which any thawing amount can be withdrawn\\n        uint256 thawingUntil;\\n    }\\n\\n\\n    //============== CONFIG STATE =============/\\n    struct Config {\\n        //dev team address (120b)\\n        address devTeam;\\n\\n        //min fee amount (128b, 248b chunk)\\n        uint128 minFee;\\n\\n        //penalty a user faces for removing assets or \\n        //allowances before a trade\\n        uint128 penaltyFee;\\n\\n        //number of blocks to lock stake and order cancellations\\n        uint8 lockoutBlocks;\\n    }\\n\\n    //============== ACCESS STATE =============/\\n    //storage structure of access controls\\n    struct AccessControl {\\n        bool reentrantFlag;\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    //============== INITIALIZATION STATE =============/\\n    struct InitControls {\\n        bool initialized;\\n        bool initializing;\\n    }\\n    \\n    //=============== GAS TANK STATE =============/\\n    struct GasBalances {\\n        mapping(address => Gas) balances;\\n    }\\n}\",\"keccak256\":\"0x2bac988367b31a192f2686eefb0578c66bc5247b8af486847b5faf4f653f0894\",\"license\":\"Unlicense\"},\"contracts/libs/LibAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Types.sol\\\";\\n\\n\\nlibrary LibAccess {\\n    \\n    function hasRole(Types.AccessControl storage ac, bytes32 role, address actor) external view returns (bool) {\\n        return ac.roles[role][actor];\\n    }\\n\\n    function _addRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        ac.roles[role][actor] = true;\\n    }\\n\\n    function _revokeRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        delete ac.roles[role][actor];\\n    }\\n}\",\"keccak256\":\"0x30f51b897619d1a661871173b3572497bf68a4e5d7faaf20ebfffe4137c13984\",\"license\":\"Unlicense\"},\"contracts/libs/LibConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibConfig {\\n\\n\\n    function store(Types.Config storage cs, Types.Config memory config) public {\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n    }\\n\\n    function copy(Types.Config storage config) public view returns(Types.Config memory) {\\n        Types.Config memory cs;\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n        return cs;\\n    }\\n    \\n\\n    //============== VIEWS ================/\\n    \\n    function getDevTeam(Types.Config storage _config) external view returns (address) {\\n        return _config.devTeam;\\n    }\\n\\n    function getLockoutBlocks(Types.Config storage _config) external view returns (uint8) {\\n        return _config.lockoutBlocks;\\n    }\\n\\n    function getMinFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.minFee;\\n    }\\n\\n    function getPenaltyFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    function setDevTeam(Types.Config storage _config, address team) external{\\n        _config.devTeam = team;\\n    }\\n\\n    function setLockoutBlocks(Types.Config storage _config, uint8 blocks) external{\\n        _config.lockoutBlocks = blocks;\\n    }\\n\\n    function setMinFee(Types.Config storage _config, uint128 fee) external{\\n        _config.minFee = fee;\\n    }\\n\\n    function setPenaltyFee(Types.Config storage _config, uint128 fee) external{\\n        _config.penaltyFee = fee;\\n    }\\n    \\n}\",\"keccak256\":\"0xaadcf6273e853a6057f400790831a95320c40940ecba17f12c6f13c4625f3136\",\"license\":\"Unlicense\"},\"contracts/libs/LibGas.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LibStorage.sol\\\";\\nimport \\\"../Types.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibGas {\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n    using SafeMath for uint;\\n\\n    //emitted when gas is deposited\\n    event GasDeposit(address indexed trader, uint112 amount);\\n\\n    //emitted when gas is marked for thaw period\\n    event GasThawing(address indexed trader, uint112 amount);\\n\\n    //emitted when gas is withdrawn\\n    event GasWithdraw(address indexed trader, uint112 amount);\\n\\n\\n    // ============ VIEWS ==============/\\n    /**\\n     * Determine how much of an account's gas tank balance can be withdrawn after a thaw period \\n     * has expired.\\n     */\\n    function availableForWithdraw(Types.GasBalances storage gs, address account) external view returns (uint256) {\\n        Types.Gas storage gas = gs.balances[account];\\n        if(gas.thawingUntil > 0 && gas.thawingUntil <= block.number) {\\n            return gas.thawing;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * Determine how much of an account's gas tank balance is availble to pay for fees\\n     */\\n    function availableForUse(Types.GasBalances storage gs, address account) internal view returns (uint256) {\\n        Types.Gas storage gas = gs.balances[account];\\n       \\n        //console.log(\\\"Current block\\\", block.number);\\n        //console.log(\\\"Expired block\\\", gas.thawingUntil);\\n\\n        if(gas.thawingUntil > 0 && gas.thawingUntil > block.number) {\\n            //we have some funds thawing, which are still usable up until its expiration block\\n            return gas.balance.add(gas.thawing);\\n        }\\n        //otherwise we can only use balance funds\\n        return gas.balance;\\n    }\\n    \\n    /**\\n     * Determine how much of an account's gas tank is waiting for a thaw period before it's \\n     * available for withdraw\\n     */\\n    function thawingFunds(Types.GasBalances storage gs, address account) internal view returns (uint256) {\\n        Types.Gas storage gas = gs.balances[account];\\n        //so long as the thaw period hasn't expired\\n        if(gas.thawingUntil > 0 && gas.thawingUntil > block.number) {\\n            //the funds are not available for withdraw\\n            return gas.thawing;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * Determine if the account has enough in the tank to pay for estimated usage for given price\\n     */\\n    function hasEnough(Types.GasBalances storage gs, address account, uint256 estimateUse, uint112 price) internal view returns (bool) {\\n        require(price > 0, \\\"Cannot estimate with 0 gas price\\\");\\n        require(estimateUse > 0, \\\"Cannot estimate with 0 gas use\\\");\\n        uint112 amount = uint112(estimateUse.mul(price));\\n        uint112 _total = uint112(availableForUse(gs, account));\\n        \\n        return _total > amount;\\n    }\\n\\n\\n    // ============ MUTATIONS ==========/\\n    /**\\n     * Deposit funds into the gas tank.\\n     */\\n    function deposit(Types.GasBalances storage gs, address account, uint112 amount) internal {\\n        Types.Gas storage gas = gs.balances[account];\\n\\n        //add incoming amount to the current balance\\n        gas.balance = uint112(gas.balance.add(amount));\\n\\n        //tell the world about it\\n        emit GasDeposit(account, amount);\\n    }\\n\\n    /**\\n     * Mark \\n     */\\n    function thaw(Types.GasBalances storage gs, address account, uint112 amount) internal {\\n        Types.Gas storage gas = gs.balances[account];\\n        //following will fail if amount is more than gas tank balance so no need\\n        //to check and waste cycles\\n        gas.balance = uint112(gas.balance.sub(amount));\\n\\n        //add to thawing total\\n        gas.thawing = uint112(gas.thawing.add(amount));\\n\\n        //set withdraw to next lockout period blocks. Note that this locks up any\\n        //previously thawed funds as well.\\n        gas.thawingUntil = block.number.add(LibStorage.getConfigStorage().lockoutBlocks);\\n\\n        //tell the world about it\\n        emit GasThawing(account, amount);\\n    }\\n\\n    \\n    /**\\n     * Try to withdraw any fully thawed funds\\n     */\\n    function withdraw(Types.GasBalances storage gs, address account, uint112 amount) internal {\\n        Types.Gas storage gas = gs.balances[account];\\n        require(gas.thawingUntil > 0, \\\"Must first request a withdraw\\\");\\n        require(gas.thawingUntil < block.number, \\\"Cannot withdraw inside lockout period\\\");\\n\\n        //this will fail if amount is more than thawing amount so no need to check amount\\n        gas.thawing = uint112(gas.thawing.sub(amount));\\n    }\\n\\n    /**\\n     * Deduct from the trader's balance after an action is complete\\n     */\\n    function deduct(Types.GasBalances storage gs, address account, uint112 amount) internal {\\n        Types.Gas storage gas = gs.balances[account];\\n        if(amount == 0) {\\n            return;\\n        }\\n        uint112 _total = uint112(availableForUse(gs, account));\\n\\n        require(_total > amount, \\\"Insufficient gas to pay amount\\\");\\n        if(gas.balance >= amount) {\\n            //if the balance has enough to pay, just remove it\\n            gas.balance = uint112(gas.balance.sub(amount));\\n        } else {\\n            //otherwise, this means there are thawing funds that have not fully thawed yet\\n            //but are stll available for use. So use them.\\n            gas.thawing = uint112(gas.thawing.sub(amount.sub(gas.balance)));\\n            gas.balance = 0;\\n        }\\n    }\\n}\",\"keccak256\":\"0xf046d6d1970698668fdd0f1e90472d2edef62f048537b4d9964743edd0a0f42a\",\"license\":\"Unlicense\"},\"contracts/libs/LibStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibStorage {\\n\\n    //keccak256(\\\"com.buidlhub.config.ConfigStorage\\\");\\n    bytes32 constant CONFIG_STORAGE_KEY = 0xf5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b9;\\n\\n     //keccak256(\\\"com.buidlhub.access.AccessControls\\\");\\n    bytes32 constant ACCESS_STORAGE_KEY = 0x3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e9;\\n\\n    //keccak256(\\\"com.buidlhub.init.InitControls\\\");\\n    bytes32 constant INIT_STORAGE_KEY = 0xd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d4741;\\n\\n    //keccak256(\\\"com.buidlhub.gastank.GasStorage\\\");\\n    bytes32 constant GAS_STORAGE_KEY = 0x8c89fc81d9ea4103ca01a6b8674fdaec22ec47acad49dcba52ad9c3d556ea075;\\n\\n    //============= STORAGE ACCESSORS ==========/\\n   \\n    function getConfigStorage() internal pure returns (Types.Config storage cs) {\\n        assembly { cs.slot := CONFIG_STORAGE_KEY }\\n    }\\n\\n    function getAccessStorage() internal pure returns (Types.AccessControl storage acs) {\\n        assembly { acs.slot := ACCESS_STORAGE_KEY }\\n    }\\n\\n    function getInitControls() internal pure returns (Types.InitControls storage ic) {\\n        assembly { ic.slot := INIT_STORAGE_KEY }\\n    }\\n\\n    function getGasStorage() internal pure returns (Types.GasBalances storage gs) {\\n        assembly { gs.slot := GAS_STORAGE_KEY }\\n    }\\n\\n}\",\"keccak256\":\"0x23193b4e6df7c3b65adc37ee422025d2bd42d2c7a9387a6fefc7cfb1a02ea741\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061312a806100206000396000f3fe60806040526004361061019c5760003560e01c806375e9aac8116100ec578063c3f909d41161008a578063e959b38a11610064578063e959b38a1461045f578063f102669b1461047f578063fbe91eba1461049f578063fc8926d3146104cd5761019c565b8063c3f909d414610408578063d547741f1461042a578063e63ab1e91461044a5761019c565b80638d3403fd116100c65780638d3403fd1461039e57806391d14854146103be578063ae9bb692146103de578063b1cf4b0c146103e65761019c565b806375e9aac81461033c57806377550610146103695780638224923a1461037e5761019c565b8063334c3c65116101595780634e1c6829116101335780634e1c6829146102c35780635cf34bcf146102e35780636a9447b51461030557806375b238fc146103275761019c565b8063334c3c65146102635780633f51e1821461028357806340ee75bb146102a35761019c565b806304421823146101a15780630f306725146101cc57806312d20441146101ec5780631eab21b91461020c57806327054df61461022c57806330f205d014610241575b600080fd5b3480156101ad57600080fd5b506101b66104ed565b6040516101c391906127d9565b60405180910390f35b3480156101d857600080fd5b506101b66101e736600461230f565b610511565b3480156101f857600080fd5b506101b661020736600461230f565b61052b565b34801561021857600080fd5b506101b661022736600461230f565b6105bd565b34801561023857600080fd5b506101b66105d1565b34801561024d57600080fd5b5061026161025c3660046125bf565b6105f5565b005b34801561026f57600080fd5b5061026161027e366004612443565b610645565b34801561028f57600080fd5b5061026161029e366004612443565b6106ee565b3480156102af57600080fd5b506102616102be36600461230f565b610774565b3480156102cf57600080fd5b506102616102de3660046125da565b61079e565b3480156102ef57600080fd5b506102f86107c8565b6040516101c39190612f2c565b34801561031157600080fd5b5061031a6107e5565b6040516101c39190612748565b34801561033357600080fd5b506101b66107fe565b34801561034857600080fd5b5061035c61035736600461232b565b610810565b6040516101c391906127b3565b34801561037557600080fd5b506102f8610828565b34801561038a57600080fd5b5061026161039936600461258e565b61084b565b3480156103aa57600080fd5b506102616103b936600461260e565b61093c565b3480156103ca57600080fd5b5061035c6103d9366004612414565b61095d565b6102616109f8565b3480156103f257600080fd5b506103fb610a35565b6040516101c39190612f74565b34801561041457600080fd5b5061041d610a4b565b6040516101c39190612db3565b34801561043657600080fd5b50610261610445366004612414565b610ae6565b34801561045657600080fd5b506101b6610b34565b34801561046b57600080fd5b5061026161047a366004612414565b610b58565b34801561048b57600080fd5b5061026161049a3660046125da565b610b98565b3480156104ab57600080fd5b506104bf6104ba366004612507565b610bce565b6040516101c39291906127be565b3480156104d957600080fd5b506102616104e83660046125bf565b610cc5565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b60006105258261051f610dae565b90610dd2565b92915050565b6000610535610dae565b604051634666141360e11b815273019Dc3169a487ADCCaE94fA8dcFcC5740912405c91638ccc28269161056d91908690600401612dd5565b60206040518083038186803b15801561058557600080fd5b505af4158015610599573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052591906125f6565b6000610525826105cb610dae565b90610e27565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b6000816001600160701b0316116106275760405162461bcd60e51b815260040161061e90612cf0565b60405180910390fd5b610642610632610e92565b8261063b610dae565b9190610e96565b50565b61065f6000805160206130d58339815191526103d9610e92565b61067b5760405162461bcd60e51b815260040161061e90612d71565b610683610f85565b6040516321cab0c760e01b8152733C50fCD9c79A17751870c5d293bf6b6765E530f4916321cab0c7916106bb91908590600401612dc1565b60006040518083038186803b1580156106d357600080fd5b505af41580156106e7573d6000803e3d6000fd5b5050505050565b60006106f8610fa9565b8054909150610100900460ff16806107125750805460ff16155b61072e5760405162461bcd60e51b815260040161061e90612cc3565b8054610100900460ff1615801561075657815460ff1961ff0019909116610100171660011782555b61075f83610fcd565b801561076f57815461ff00191682555b505050565b8061077d610f85565b80546001600160a01b0319166001600160a01b039290921691909117905550565b806107a7610f85565b60010180546001600160801b03928316600160801b02921691909117905550565b60006107d2610f85565b600101546001600160801b031690505b90565b60006107ef610f85565b546001600160a01b0316905090565b6000805160206130d583398151915281565b60008161081f846105cb610dae565b10159392505050565b6000610832610f85565b60010154600160801b90046001600160801b0316919050565b6108777f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76103d9610e92565b6108935760405162461bcd60e51b815260040161061e90612bdd565b61089b611045565b5460ff16156108bc5760405162461bcd60e51b815260040161061e90612817565b60016108c6611045565b805460ff191691151591909117905560005a90506108e2612192565b6108eb86611069565b9050600060606108fd88888888611219565b9150915061090c888484611305565b61091988838386886115db565b505050506000610927611045565b805460ff191691151591909117905550505050565b80610945610f85565b600201805460ff191660ff9290921691909117905550565b6000610967611045565b604051630f40931b60e41b815273824Ac211d63D628546c255aAABE124f1c4089C5D9163f40931b0916109a1919087908790600401612d94565b60206040518083038186803b1580156109b957600080fd5b505af41580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190612356565b9392505050565b60003411610a185760405162461bcd60e51b815260040161061e90612abf565b610a33610a23610e92565b34610a2c610dae565b9190611871565b565b6000610a3f610f85565b6002015460ff16905090565b610a536121ba565b610a5b610f85565b604051636d73f0db60e01b8152733C50fCD9c79A17751870c5d293bf6b6765E530f491636d73f0db91610a9191906004016127d9565b60806040518083038186803b158015610aa957600080fd5b505af4158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae191906124ab565b905090565b610b006000805160206130d58339815191526103d9610e92565b610b1c5760405162461bcd60e51b815260040161061e90612d71565b610b308282610b29611045565b91906118f8565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610b726000805160206130d58339815191526103d9610e92565b610b8e5760405162461bcd60e51b815260040161061e90612d71565b610b308282611927565b80610ba1610f85565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b60006060333014610bf15760405162461bcd60e51b815260040161061e90612b94565b610c09610c0336889003880188612572565b8661193b565b60006060866001600160a01b031663a76ff28e8988886040518463ffffffff1660e01b8152600401610c3d93929190612dec565b600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c939190810190612372565b9150915081610cb6578060405162461bcd60e51b815260040161061e91906127e2565b90925090505b94509492505050565b610ccd611045565b5460ff1615610cee5760405162461bcd60e51b815260040161061e90612817565b6001610cf8611045565b805460ff19169115159190911790556001600160701b038116610d2d5760405162461bcd60e51b815260040161061e90612cf0565b610d48610d38610e92565b82610d41610dae565b91906119c1565b610d50610e92565b6001600160a01b03166108fc826001600160701b03169081150290604051600060405180830381858888f19350505050158015610d91573d6000803e3d6000fd5b506000610d9c611045565b805460ff191691151591909117905550565b7f8c89fc81d9ea4103ca01a6b8674fdaec22ec47acad49dcba52ad9c3d556ea07590565b6001600160a01b0381166000908152602083905260408120600181015415801590610e005750438160010154115b15610e1d5754600160701b90046001600160701b03169050610525565b5060009392505050565b6001600160a01b0381166000908152602083905260408120600181015415801590610e555750438160010154115b15610e81578054610e79906001600160701b0380821691600160701b900416611a68565b915050610525565b546001600160701b03169392505050565b3390565b6001600160a01b03821660009081526020849052604090208054610ec7906001600160701b03908116908416611a8d565b81546001600160701b0319166001600160701b0391821617808355610ef891600160701b9091048116908416611a68565b81546001600160701b0391909116600160701b02600160701b600160e01b0319909116178155610f37610f29610f85565b60020154439060ff16611a68565b60018201556040516001600160a01b038416907f2003b3784184319a80d89c8f4f47ed588347aba97e0f40ae058f928c8bb5f74d90610f77908590612f18565b60405180910390a250505050565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b610fd5610f85565b6040516321cab0c760e01b8152733C50fCD9c79A17751870c5d293bf6b6765E530f4916321cab0c79161100d91908590600401612dc1565b60006040518083038186803b15801561102557600080fd5b505af4158015611039573d6000803e3d6000fd5b50505050610642611ab5565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b611071612192565b61107b823a611b7e565b6110975760405162461bcd60e51b815260040161061e90612c8c565b6110a082611c55565b6110bc5760405162461bcd60e51b815260040161061e90612b4b565b6110c582611cf2565b6110e15760405162461bcd60e51b815260040161061e90612b00565b60405180608001604052808360800151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b81526004016111249190612748565b60206040518083038186803b15801561113c57600080fd5b505afa158015611150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117491906125f6565b81526020018360a00151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b81526004016111b19190612748565b60206040518083038186803b1580156111c957600080fd5b505afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120191906125f6565b81526020016000815260200160008152509050919050565b600060603063fbe91eba611231620138805a90611a8d565b888888886040518663ffffffff1660e01b81526004016112549493929190612e8a565b600060405180830381600088803b15801561126e57600080fd5b5087f1935050505080156112a457506040513d6000823e601f3d908101601f191682016040526112a19190810190612372565b60015b6112fb576112b0612fdb565b806112bb57506112c6565b6000925090506112f6565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000905b610cbc565b9092509050610cbc565b60808301515160408085015190516370a0823160e01b81526001600160a01b03909216916370a082319161133b91600401612748565b60206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b91906125f6565b604083015280611425576113c76040518060400160405280600c81526020016b125b9c1d5d0818985b08188d60a21b8152508360000151611d41565b6113fc6040518060400160405280600f81526020016e24b7383aba103130b61030b33a32b960891b8152508360400151611d41565b81516040830151146114205760405162461bcd60e51b815260040161061e906129f9565b61076f565b60a08301515160408085015190516370a0823160e01b81526001600160a01b03909216916370a082319161145b91600401612748565b60206040518083038186803b15801561147357600080fd5b505afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab91906125f6565b60608301526040805180820190915260208082527f54726164657220746f6b656e2062616c616e6365206265666f72652073776170818301528301516114f19190611d41565b611529604051806040016040528060128152602001714e6577207472616465722062616c616e636560701b8152508360600151611d41565b8260a00151602001516001600160701b031661155683602001518460600151611a8d90919063ffffffff16565b10156115745760405162461bcd60e51b815260040161061e90612c00565b81516040830151106115985760405162461bcd60e51b815260040161061e90612907565b608083015160200151604083015183516001600160701b03909216916115bd91611a8d565b111561076f5760405162461bcd60e51b815260040161061e90612a47565b836116a65760006115f961ea606115f35a8590611a8d565b90611a68565b90506000611607823a611d86565b9050611617876040015182611dc0565b86604001516001600160a01b03167f25e268b6e417ca50f83f2b95db36dfd7e9d897f9b0b714668524e848e86353478287604051611656929190612f40565b60405180910390a2611666610e92565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561169e573d6000803e3d6000fd5b5050506106e7565b60006116b961ea606115f35a8590611a8d565b905060006116c7823a611d86565b9050611707876040015161170289602001516001600160801b03166115f38b600001516001600160801b031686611a6890919063ffffffff16565b611dc0565b61170f610e92565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015611747573d6000803e3d6000fd5b50611750610f85565b5487516040516001600160a01b03909216916001600160801b0390911680156108fc02916000818181858888f19350505050158015611793573d6000803e3d6000fd5b506117c46040518060400160405280600f81526020016e05375636365737366756c207377617608c1b815250611dd4565b6117cc610e92565b6001600160a01b031687604001516001600160a01b03167f5ac72b858888990bb2049431a88689d4792e4f81276a67205492ba0e430812ae61181f87604001518860000151611a8d90919063ffffffff16565b6020880151606089015161183291611a8d565b60208c01518c5161184f916001600160801b039182169116611a68565b866040516118609493929190612f59565b60405180910390a350505050505050565b6001600160a01b038216600090815260208490526040902080546118a2906001600160701b03908116908416611a68565b81546001600160701b0319166001600160701b03919091161781556040516001600160a01b038416907fc0fa3ea2fda298bdf9ac3cd23fd02c7a0562596814d731619ee046a7a93c09be90610f77908590612f18565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b610b308282611934611045565b9190611e17565b604082015160808301516020810151905161196c926001600160a01b039091169184906001600160701b0316611e4a565b60208201516001600160801b031615610b305760208201516040516001600160a01b038316916001600160801b031680156108fc02916000818181858888f1935050505015801561076f573d6000803e3d6000fd5b6001600160a01b038216600090815260208490526040902060018101546119fa5760405162461bcd60e51b815260040161061e90612862565b43816001015410611a1d5760405162461bcd60e51b815260040161061e90612937565b8054611a3d90600160701b90046001600160701b03908116908416611a8d565b81546001600160701b0391909116600160701b02600160701b600160e01b0319909116179055505050565b6000828201838110156109f15760405162461bcd60e51b815260040161061e90612899565b600082821115611aaf5760405162461bcd60e51b815260040161061e9061297c565b50900390565b6000611abf610fa9565b8054909150610100900460ff1680611ad95750805460ff16155b611af55760405162461bcd60e51b815260040161061e90612cc3565b8054610100900460ff16158015611b1d57815460ff1961ff0019909116610100171660011782555b6000611b27610e92565b9050611b416000805160206130d583398151915282611927565b611b6b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611927565b508015610b305750805461ff0019169055565b600080611b8e6206ddd084611d86565b90506000611bcc611b9d610f85565b60010154602087015187516001600160801b03600160801b9093048316926115f3928116918391889116611a68565b6040808701519051630ebd355960e31b815291925060009130916375e9aac891611bfb9190869060040161279a565b60206040518083038186803b158015611c1357600080fd5b505afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190612356565b9695505050505050565b6000808260800151602001516001600160701b03168360800151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b8152600401611ca29190612748565b60206040518083038186803b158015611cba57600080fd5b505afa158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f91906125f6565b6000808260800151602001516001600160701b03168360800151600001516001600160a01b031663dd62ed3e8560400151306040518363ffffffff1660e01b8152600401611ca292919061275c565b610b308282604051602401611d579291906127f5565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611ea8565b600082611d9557506000610525565b82820282848281611da257fe5b04146109f15760405162461bcd60e51b815260040161061e90612a7e565b610b308282611dcd610dae565b9190611ec9565b61064281604051602401611de891906127e2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611ea8565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b611ea2846323b872dd60e01b858585604051602401611e6b93929190612776565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fec565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b03821660009081526020849052604090206001600160701b038216611ef5575061076f565b6000611f018585610e27565b9050826001600160701b0316816001600160701b031611611f345760405162461bcd60e51b815260040161061e906128d0565b81546001600160701b03808516911610611f81578154611f61906001600160701b03908116908516611a8d565b82546001600160701b0319166001600160701b03919091161782556106e7565b8154611fb590611f9d906001600160701b038681169116611a8d565b8354600160701b90046001600160701b031690611a8d565b82546001600160701b03196001600160701b0392909216600160701b02600160701b600160e01b0319909116171682555050505050565b6060612041826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661207b9092919063ffffffff16565b80519091501561076f578080602001905181019061205f9190612356565b61076f5760405162461bcd60e51b815260040161061e90612d27565b606061208a8484600085612092565b949350505050565b6060824710156120b45760405162461bcd60e51b815260040161061e906129b3565b6120bd85612153565b6120d95760405162461bcd60e51b815260040161061e90612c55565b60006060866001600160a01b031685876040516120f6919061272c565b60006040518083038185875af1925050503d8060008114612133576040519150601f19603f3d011682016040523d82523d6000602084013e612138565b606091505b5091509150612148828286612159565b979650505050505050565b3b151590565b606083156121685750816109f1565b8251156121785782518084602001fd5b8160405162461bcd60e51b815260040161061e91906127e2565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60008083601f8401126121f2578182fd5b50813567ffffffffffffffff811115612209578182fd5b60208301915083602082850101111561222157600080fd5b9250929050565b6000610100828403121561223a578081fd5b61224460c0612f82565b90508135612251816130b0565b81526020820135612261816130b0565b6020820152604082013561227481613080565b60408201526060820135612287816130a3565b606082015261229983608084016122b6565b60808201526122ab8360c084016122b6565b60a082015292915050565b6000604082840312156122c7578081fd5b6122d16040612f82565b905081356122de81613080565b81526122ed83602084016122f8565b602082015292915050565b80356001600160701b038116811461052557600080fd5b600060208284031215612320578081fd5b81356109f181613080565b6000806040838503121561233d578081fd5b823561234881613080565b946020939093013593505050565b600060208284031215612367578081fd5b81516109f181613095565b60008060408385031215612384578182fd5b825161238f81613095565b602084015190925067ffffffffffffffff808211156123ac578283fd5b818501915085601f8301126123bf578283fd5b8151818111156123cd578384fd5b6123e0601f8201601f1916602001612f82565b91508082528660208285010111156123f6578384fd5b612407816020840160208601612fa9565b5080925050509250929050565b60008060408385031215612426578182fd5b82359150602083013561243881613080565b809150509250929050565b600060808284031215612454578081fd5b61245e6080612f82565b823561246981613080565b81526020830135612479816130b0565b6020820152604083013561248c816130b0565b6040820152606083013561249f816130c5565b60608201529392505050565b6000608082840312156124bc578081fd5b6124c66080612f82565b82516124d181613080565b815260208301516124e1816130b0565b602082015260408301516124f4816130b0565b6040820152606083015161249f816130c5565b60008060008084860361014081121561251e578283fd5b6101008082121561252d578384fd5b869550850135905061253e81613080565b925061012085013567ffffffffffffffff81111561255a578283fd5b612566878288016121e1565b95989497509550505050565b60006101008284031215612584578081fd5b6109f18383612228565b60008060008061014085870312156125a4578182fd5b6125ae8686612228565b935061010085013561253e81613080565b6000602082840312156125d0578081fd5b6109f183836122f8565b6000602082840312156125eb578081fd5b81356109f1816130b0565b600060208284031215612607578081fd5b5051919050565b60006020828403121561261f578081fd5b81356109f1816130c5565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6002811061265e57fe5b9052565b6000815180845261267a816020860160208601612fa9565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b80356126d981613080565b6001600160a01b0316825260208101356001600160701b0381168082146126ff57600080fd5b80602085015250505050565b80516001600160a01b031682526020908101516001600160701b0316910152565b6000825161273e818460208701612fa9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600083151582526040602083015261208a6040830184612662565b90815260200190565b6000602082526109f16020830184612662565b6000604082526128086040830185612662565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601d908201527f4d75737420666972737420726571756573742061207769746864726177000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f496e73756666696369656e742067617320746f2070617920616d6f756e740000604082015260600190565b602080825260169082015275496e70757420746f6b656e73206e6f7420757365642160501b604082015260600190565b60208082526025908201527f43616e6e6f7420776974686472617720696e73696465206c6f636b6f75742070604082015264195c9a5bd960da1b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252602e908201527f6661696c656420747261646520616374696f6e20646964206e6f74207265667560408201526d6e6420696e7075742066756e647360901b606082015260800190565b6020808252601a908201527f5573656420746f6f206d616e7920696e70757420746f6b656e73000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526021908201527f4e6f2066756e64732070726f766964656420666f7220676173206465706f73696040820152601d60fa1b606082015260800190565b6020808252602b908201527f496e73756666696369656e74207370656e6420616c6c6f77616e6365206f6e2060408201526a34b7383aba103a37b5b2b760a91b606082015260800190565b60208082526029908201527f496e73756666696369656e7420696e70757420746f6b656e2062616c616e636560408201526820746f20747261646560b81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b60208082526035908201527f547261646520616374696f6e20646964206e6f74207472616e73666572206f756040820152743a383aba103a37b5b2b739903a37903a3930b232b960591b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601b908201527f496e73756666696369656e74206761732074616e6b2066756e64730000000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b60208082526018908201527f43616e6e6f74207769746864726177203020616d6f756e740000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610525828461268e565b82815260a081016109f1602083018461268e565b9182526001600160a01b0316602082015260400190565b60006101208535612dfc816130b0565b6001600160801b039081168452602087013590612e18826130b0565b1660208401526040860135612e2c81613080565b6001600160a01b031660408401526060860135612e48816130a3565b612e556060850182612654565b50612e6660808401608088016126ce565b612e7660c0840160c088016126ce565b80610100840152611c4b818401858761262a565b60006101406001600160801b0380885116845280602089015116602085015250604087015160018060a01b03808216604086015260608901519150612ed26060860183612654565b60808901519150612ee6608086018361270b565b60a08901519150612efa60c086018361270b565b8716610100850152506101208301819052612148818401858761262a565b6001600160701b0391909116815260200190565b6001600160801b0391909116815260200190565b60008382526040602083015261208a6040830184612662565b93845260208401929092526040830152606082015260800190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612fa157600080fd5b604052919050565b60005b83811015612fc4578181015183820152602001612fac565b83811115611ea25750506000910152565b60e01c90565b600060443d1015612feb576107e2565b600481823e6308c379a0612fff8251612fd5565b14613009576107e2565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561303957505050506107e2565b8284019250825191508082111561305357505050506107e2565b503d8301602082840101111561306b575050506107e2565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461064257600080fd5b801515811461064257600080fd5b6002811061064257600080fd5b6001600160801b038116811461064257600080fd5b60ff8116811461064257600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122000df7616f3389001b75583a1706d38dfc1f830c2a80272a3d9c72bbb0cb6c33864736f6c63430007000033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806375e9aac8116100ec578063c3f909d41161008a578063e959b38a11610064578063e959b38a1461045f578063f102669b1461047f578063fbe91eba1461049f578063fc8926d3146104cd5761019c565b8063c3f909d414610408578063d547741f1461042a578063e63ab1e91461044a5761019c565b80638d3403fd116100c65780638d3403fd1461039e57806391d14854146103be578063ae9bb692146103de578063b1cf4b0c146103e65761019c565b806375e9aac81461033c57806377550610146103695780638224923a1461037e5761019c565b8063334c3c65116101595780634e1c6829116101335780634e1c6829146102c35780635cf34bcf146102e35780636a9447b51461030557806375b238fc146103275761019c565b8063334c3c65146102635780633f51e1821461028357806340ee75bb146102a35761019c565b806304421823146101a15780630f306725146101cc57806312d20441146101ec5780631eab21b91461020c57806327054df61461022c57806330f205d014610241575b600080fd5b3480156101ad57600080fd5b506101b66104ed565b6040516101c391906127d9565b60405180910390f35b3480156101d857600080fd5b506101b66101e736600461230f565b610511565b3480156101f857600080fd5b506101b661020736600461230f565b61052b565b34801561021857600080fd5b506101b661022736600461230f565b6105bd565b34801561023857600080fd5b506101b66105d1565b34801561024d57600080fd5b5061026161025c3660046125bf565b6105f5565b005b34801561026f57600080fd5b5061026161027e366004612443565b610645565b34801561028f57600080fd5b5061026161029e366004612443565b6106ee565b3480156102af57600080fd5b506102616102be36600461230f565b610774565b3480156102cf57600080fd5b506102616102de3660046125da565b61079e565b3480156102ef57600080fd5b506102f86107c8565b6040516101c39190612f2c565b34801561031157600080fd5b5061031a6107e5565b6040516101c39190612748565b34801561033357600080fd5b506101b66107fe565b34801561034857600080fd5b5061035c61035736600461232b565b610810565b6040516101c391906127b3565b34801561037557600080fd5b506102f8610828565b34801561038a57600080fd5b5061026161039936600461258e565b61084b565b3480156103aa57600080fd5b506102616103b936600461260e565b61093c565b3480156103ca57600080fd5b5061035c6103d9366004612414565b61095d565b6102616109f8565b3480156103f257600080fd5b506103fb610a35565b6040516101c39190612f74565b34801561041457600080fd5b5061041d610a4b565b6040516101c39190612db3565b34801561043657600080fd5b50610261610445366004612414565b610ae6565b34801561045657600080fd5b506101b6610b34565b34801561046b57600080fd5b5061026161047a366004612414565b610b58565b34801561048b57600080fd5b5061026161049a3660046125da565b610b98565b3480156104ab57600080fd5b506104bf6104ba366004612507565b610bce565b6040516101c39291906127be565b3480156104d957600080fd5b506102616104e83660046125bf565b610cc5565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b60006105258261051f610dae565b90610dd2565b92915050565b6000610535610dae565b604051634666141360e11b815273__$a72b9955336c87e02ef569d9208435f43d$__91638ccc28269161056d91908690600401612dd5565b60206040518083038186803b15801561058557600080fd5b505af4158015610599573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052591906125f6565b6000610525826105cb610dae565b90610e27565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b6000816001600160701b0316116106275760405162461bcd60e51b815260040161061e90612cf0565b60405180910390fd5b610642610632610e92565b8261063b610dae565b9190610e96565b50565b61065f6000805160206130d58339815191526103d9610e92565b61067b5760405162461bcd60e51b815260040161061e90612d71565b610683610f85565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c7916106bb91908590600401612dc1565b60006040518083038186803b1580156106d357600080fd5b505af41580156106e7573d6000803e3d6000fd5b5050505050565b60006106f8610fa9565b8054909150610100900460ff16806107125750805460ff16155b61072e5760405162461bcd60e51b815260040161061e90612cc3565b8054610100900460ff1615801561075657815460ff1961ff0019909116610100171660011782555b61075f83610fcd565b801561076f57815461ff00191682555b505050565b8061077d610f85565b80546001600160a01b0319166001600160a01b039290921691909117905550565b806107a7610f85565b60010180546001600160801b03928316600160801b02921691909117905550565b60006107d2610f85565b600101546001600160801b031690505b90565b60006107ef610f85565b546001600160a01b0316905090565b6000805160206130d583398151915281565b60008161081f846105cb610dae565b10159392505050565b6000610832610f85565b60010154600160801b90046001600160801b0316919050565b6108777f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76103d9610e92565b6108935760405162461bcd60e51b815260040161061e90612bdd565b61089b611045565b5460ff16156108bc5760405162461bcd60e51b815260040161061e90612817565b60016108c6611045565b805460ff191691151591909117905560005a90506108e2612192565b6108eb86611069565b9050600060606108fd88888888611219565b9150915061090c888484611305565b61091988838386886115db565b505050506000610927611045565b805460ff191691151591909117905550505050565b80610945610f85565b600201805460ff191660ff9290921691909117905550565b6000610967611045565b604051630f40931b60e41b815273__$712f9bd20561de4f0bfbc1442284f16fb4$__9163f40931b0916109a1919087908790600401612d94565b60206040518083038186803b1580156109b957600080fd5b505af41580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190612356565b9392505050565b60003411610a185760405162461bcd60e51b815260040161061e90612abf565b610a33610a23610e92565b34610a2c610dae565b9190611871565b565b6000610a3f610f85565b6002015460ff16905090565b610a536121ba565b610a5b610f85565b604051636d73f0db60e01b815273__$015d7794271f690550e5fe4793e4b79169$__91636d73f0db91610a9191906004016127d9565b60806040518083038186803b158015610aa957600080fd5b505af4158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae191906124ab565b905090565b610b006000805160206130d58339815191526103d9610e92565b610b1c5760405162461bcd60e51b815260040161061e90612d71565b610b308282610b29611045565b91906118f8565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610b726000805160206130d58339815191526103d9610e92565b610b8e5760405162461bcd60e51b815260040161061e90612d71565b610b308282611927565b80610ba1610f85565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b60006060333014610bf15760405162461bcd60e51b815260040161061e90612b94565b610c09610c0336889003880188612572565b8661193b565b60006060866001600160a01b031663a76ff28e8988886040518463ffffffff1660e01b8152600401610c3d93929190612dec565b600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c939190810190612372565b9150915081610cb6578060405162461bcd60e51b815260040161061e91906127e2565b90925090505b94509492505050565b610ccd611045565b5460ff1615610cee5760405162461bcd60e51b815260040161061e90612817565b6001610cf8611045565b805460ff19169115159190911790556001600160701b038116610d2d5760405162461bcd60e51b815260040161061e90612cf0565b610d48610d38610e92565b82610d41610dae565b91906119c1565b610d50610e92565b6001600160a01b03166108fc826001600160701b03169081150290604051600060405180830381858888f19350505050158015610d91573d6000803e3d6000fd5b506000610d9c611045565b805460ff191691151591909117905550565b7f8c89fc81d9ea4103ca01a6b8674fdaec22ec47acad49dcba52ad9c3d556ea07590565b6001600160a01b0381166000908152602083905260408120600181015415801590610e005750438160010154115b15610e1d5754600160701b90046001600160701b03169050610525565b5060009392505050565b6001600160a01b0381166000908152602083905260408120600181015415801590610e555750438160010154115b15610e81578054610e79906001600160701b0380821691600160701b900416611a68565b915050610525565b546001600160701b03169392505050565b3390565b6001600160a01b03821660009081526020849052604090208054610ec7906001600160701b03908116908416611a8d565b81546001600160701b0319166001600160701b0391821617808355610ef891600160701b9091048116908416611a68565b81546001600160701b0391909116600160701b02600160701b600160e01b0319909116178155610f37610f29610f85565b60020154439060ff16611a68565b60018201556040516001600160a01b038416907f2003b3784184319a80d89c8f4f47ed588347aba97e0f40ae058f928c8bb5f74d90610f77908590612f18565b60405180910390a250505050565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b610fd5610f85565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c79161100d91908590600401612dc1565b60006040518083038186803b15801561102557600080fd5b505af4158015611039573d6000803e3d6000fd5b50505050610642611ab5565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b611071612192565b61107b823a611b7e565b6110975760405162461bcd60e51b815260040161061e90612c8c565b6110a082611c55565b6110bc5760405162461bcd60e51b815260040161061e90612b4b565b6110c582611cf2565b6110e15760405162461bcd60e51b815260040161061e90612b00565b60405180608001604052808360800151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b81526004016111249190612748565b60206040518083038186803b15801561113c57600080fd5b505afa158015611150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117491906125f6565b81526020018360a00151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b81526004016111b19190612748565b60206040518083038186803b1580156111c957600080fd5b505afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120191906125f6565b81526020016000815260200160008152509050919050565b600060603063fbe91eba611231620138805a90611a8d565b888888886040518663ffffffff1660e01b81526004016112549493929190612e8a565b600060405180830381600088803b15801561126e57600080fd5b5087f1935050505080156112a457506040513d6000823e601f3d908101601f191682016040526112a19190810190612372565b60015b6112fb576112b0612fdb565b806112bb57506112c6565b6000925090506112f6565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000905b610cbc565b9092509050610cbc565b60808301515160408085015190516370a0823160e01b81526001600160a01b03909216916370a082319161133b91600401612748565b60206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b91906125f6565b604083015280611425576113c76040518060400160405280600c81526020016b125b9c1d5d0818985b08188d60a21b8152508360000151611d41565b6113fc6040518060400160405280600f81526020016e24b7383aba103130b61030b33a32b960891b8152508360400151611d41565b81516040830151146114205760405162461bcd60e51b815260040161061e906129f9565b61076f565b60a08301515160408085015190516370a0823160e01b81526001600160a01b03909216916370a082319161145b91600401612748565b60206040518083038186803b15801561147357600080fd5b505afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab91906125f6565b60608301526040805180820190915260208082527f54726164657220746f6b656e2062616c616e6365206265666f72652073776170818301528301516114f19190611d41565b611529604051806040016040528060128152602001714e6577207472616465722062616c616e636560701b8152508360600151611d41565b8260a00151602001516001600160701b031661155683602001518460600151611a8d90919063ffffffff16565b10156115745760405162461bcd60e51b815260040161061e90612c00565b81516040830151106115985760405162461bcd60e51b815260040161061e90612907565b608083015160200151604083015183516001600160701b03909216916115bd91611a8d565b111561076f5760405162461bcd60e51b815260040161061e90612a47565b836116a65760006115f961ea606115f35a8590611a8d565b90611a68565b90506000611607823a611d86565b9050611617876040015182611dc0565b86604001516001600160a01b03167f25e268b6e417ca50f83f2b95db36dfd7e9d897f9b0b714668524e848e86353478287604051611656929190612f40565b60405180910390a2611666610e92565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561169e573d6000803e3d6000fd5b5050506106e7565b60006116b961ea606115f35a8590611a8d565b905060006116c7823a611d86565b9050611707876040015161170289602001516001600160801b03166115f38b600001516001600160801b031686611a6890919063ffffffff16565b611dc0565b61170f610e92565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015611747573d6000803e3d6000fd5b50611750610f85565b5487516040516001600160a01b03909216916001600160801b0390911680156108fc02916000818181858888f19350505050158015611793573d6000803e3d6000fd5b506117c46040518060400160405280600f81526020016e05375636365737366756c207377617608c1b815250611dd4565b6117cc610e92565b6001600160a01b031687604001516001600160a01b03167f5ac72b858888990bb2049431a88689d4792e4f81276a67205492ba0e430812ae61181f87604001518860000151611a8d90919063ffffffff16565b6020880151606089015161183291611a8d565b60208c01518c5161184f916001600160801b039182169116611a68565b866040516118609493929190612f59565b60405180910390a350505050505050565b6001600160a01b038216600090815260208490526040902080546118a2906001600160701b03908116908416611a68565b81546001600160701b0319166001600160701b03919091161781556040516001600160a01b038416907fc0fa3ea2fda298bdf9ac3cd23fd02c7a0562596814d731619ee046a7a93c09be90610f77908590612f18565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b610b308282611934611045565b9190611e17565b604082015160808301516020810151905161196c926001600160a01b039091169184906001600160701b0316611e4a565b60208201516001600160801b031615610b305760208201516040516001600160a01b038316916001600160801b031680156108fc02916000818181858888f1935050505015801561076f573d6000803e3d6000fd5b6001600160a01b038216600090815260208490526040902060018101546119fa5760405162461bcd60e51b815260040161061e90612862565b43816001015410611a1d5760405162461bcd60e51b815260040161061e90612937565b8054611a3d90600160701b90046001600160701b03908116908416611a8d565b81546001600160701b0391909116600160701b02600160701b600160e01b0319909116179055505050565b6000828201838110156109f15760405162461bcd60e51b815260040161061e90612899565b600082821115611aaf5760405162461bcd60e51b815260040161061e9061297c565b50900390565b6000611abf610fa9565b8054909150610100900460ff1680611ad95750805460ff16155b611af55760405162461bcd60e51b815260040161061e90612cc3565b8054610100900460ff16158015611b1d57815460ff1961ff0019909116610100171660011782555b6000611b27610e92565b9050611b416000805160206130d583398151915282611927565b611b6b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611927565b508015610b305750805461ff0019169055565b600080611b8e6206ddd084611d86565b90506000611bcc611b9d610f85565b60010154602087015187516001600160801b03600160801b9093048316926115f3928116918391889116611a68565b6040808701519051630ebd355960e31b815291925060009130916375e9aac891611bfb9190869060040161279a565b60206040518083038186803b158015611c1357600080fd5b505afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190612356565b9695505050505050565b6000808260800151602001516001600160701b03168360800151600001516001600160a01b03166370a0823185604001516040518263ffffffff1660e01b8152600401611ca29190612748565b60206040518083038186803b158015611cba57600080fd5b505afa158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f91906125f6565b6000808260800151602001516001600160701b03168360800151600001516001600160a01b031663dd62ed3e8560400151306040518363ffffffff1660e01b8152600401611ca292919061275c565b610b308282604051602401611d579291906127f5565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611ea8565b600082611d9557506000610525565b82820282848281611da257fe5b04146109f15760405162461bcd60e51b815260040161061e90612a7e565b610b308282611dcd610dae565b9190611ec9565b61064281604051602401611de891906127e2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611ea8565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b611ea2846323b872dd60e01b858585604051602401611e6b93929190612776565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fec565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b03821660009081526020849052604090206001600160701b038216611ef5575061076f565b6000611f018585610e27565b9050826001600160701b0316816001600160701b031611611f345760405162461bcd60e51b815260040161061e906128d0565b81546001600160701b03808516911610611f81578154611f61906001600160701b03908116908516611a8d565b82546001600160701b0319166001600160701b03919091161782556106e7565b8154611fb590611f9d906001600160701b038681169116611a8d565b8354600160701b90046001600160701b031690611a8d565b82546001600160701b03196001600160701b0392909216600160701b02600160701b600160e01b0319909116171682555050505050565b6060612041826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661207b9092919063ffffffff16565b80519091501561076f578080602001905181019061205f9190612356565b61076f5760405162461bcd60e51b815260040161061e90612d27565b606061208a8484600085612092565b949350505050565b6060824710156120b45760405162461bcd60e51b815260040161061e906129b3565b6120bd85612153565b6120d95760405162461bcd60e51b815260040161061e90612c55565b60006060866001600160a01b031685876040516120f6919061272c565b60006040518083038185875af1925050503d8060008114612133576040519150601f19603f3d011682016040523d82523d6000602084013e612138565b606091505b5091509150612148828286612159565b979650505050505050565b3b151590565b606083156121685750816109f1565b8251156121785782518084602001fd5b8160405162461bcd60e51b815260040161061e91906127e2565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60008083601f8401126121f2578182fd5b50813567ffffffffffffffff811115612209578182fd5b60208301915083602082850101111561222157600080fd5b9250929050565b6000610100828403121561223a578081fd5b61224460c0612f82565b90508135612251816130b0565b81526020820135612261816130b0565b6020820152604082013561227481613080565b60408201526060820135612287816130a3565b606082015261229983608084016122b6565b60808201526122ab8360c084016122b6565b60a082015292915050565b6000604082840312156122c7578081fd5b6122d16040612f82565b905081356122de81613080565b81526122ed83602084016122f8565b602082015292915050565b80356001600160701b038116811461052557600080fd5b600060208284031215612320578081fd5b81356109f181613080565b6000806040838503121561233d578081fd5b823561234881613080565b946020939093013593505050565b600060208284031215612367578081fd5b81516109f181613095565b60008060408385031215612384578182fd5b825161238f81613095565b602084015190925067ffffffffffffffff808211156123ac578283fd5b818501915085601f8301126123bf578283fd5b8151818111156123cd578384fd5b6123e0601f8201601f1916602001612f82565b91508082528660208285010111156123f6578384fd5b612407816020840160208601612fa9565b5080925050509250929050565b60008060408385031215612426578182fd5b82359150602083013561243881613080565b809150509250929050565b600060808284031215612454578081fd5b61245e6080612f82565b823561246981613080565b81526020830135612479816130b0565b6020820152604083013561248c816130b0565b6040820152606083013561249f816130c5565b60608201529392505050565b6000608082840312156124bc578081fd5b6124c66080612f82565b82516124d181613080565b815260208301516124e1816130b0565b602082015260408301516124f4816130b0565b6040820152606083015161249f816130c5565b60008060008084860361014081121561251e578283fd5b6101008082121561252d578384fd5b869550850135905061253e81613080565b925061012085013567ffffffffffffffff81111561255a578283fd5b612566878288016121e1565b95989497509550505050565b60006101008284031215612584578081fd5b6109f18383612228565b60008060008061014085870312156125a4578182fd5b6125ae8686612228565b935061010085013561253e81613080565b6000602082840312156125d0578081fd5b6109f183836122f8565b6000602082840312156125eb578081fd5b81356109f1816130b0565b600060208284031215612607578081fd5b5051919050565b60006020828403121561261f578081fd5b81356109f1816130c5565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6002811061265e57fe5b9052565b6000815180845261267a816020860160208601612fa9565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b80356126d981613080565b6001600160a01b0316825260208101356001600160701b0381168082146126ff57600080fd5b80602085015250505050565b80516001600160a01b031682526020908101516001600160701b0316910152565b6000825161273e818460208701612fa9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600083151582526040602083015261208a6040830184612662565b90815260200190565b6000602082526109f16020830184612662565b6000604082526128086040830185612662565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601d908201527f4d75737420666972737420726571756573742061207769746864726177000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f496e73756666696369656e742067617320746f2070617920616d6f756e740000604082015260600190565b602080825260169082015275496e70757420746f6b656e73206e6f7420757365642160501b604082015260600190565b60208082526025908201527f43616e6e6f7420776974686472617720696e73696465206c6f636b6f75742070604082015264195c9a5bd960da1b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252602e908201527f6661696c656420747261646520616374696f6e20646964206e6f74207265667560408201526d6e6420696e7075742066756e647360901b606082015260800190565b6020808252601a908201527f5573656420746f6f206d616e7920696e70757420746f6b656e73000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526021908201527f4e6f2066756e64732070726f766964656420666f7220676173206465706f73696040820152601d60fa1b606082015260800190565b6020808252602b908201527f496e73756666696369656e74207370656e6420616c6c6f77616e6365206f6e2060408201526a34b7383aba103a37b5b2b760a91b606082015260800190565b60208082526029908201527f496e73756666696369656e7420696e70757420746f6b656e2062616c616e636560408201526820746f20747261646560b81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b60208082526035908201527f547261646520616374696f6e20646964206e6f74207472616e73666572206f756040820152743a383aba103a37b5b2b739903a37903a3930b232b960591b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601b908201527f496e73756666696369656e74206761732074616e6b2066756e64730000000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b60208082526018908201527f43616e6e6f74207769746864726177203020616d6f756e740000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610525828461268e565b82815260a081016109f1602083018461268e565b9182526001600160a01b0316602082015260400190565b60006101208535612dfc816130b0565b6001600160801b039081168452602087013590612e18826130b0565b1660208401526040860135612e2c81613080565b6001600160a01b031660408401526060860135612e48816130a3565b612e556060850182612654565b50612e6660808401608088016126ce565b612e7660c0840160c088016126ce565b80610100840152611c4b818401858761262a565b60006101406001600160801b0380885116845280602089015116602085015250604087015160018060a01b03808216604086015260608901519150612ed26060860183612654565b60808901519150612ee6608086018361270b565b60a08901519150612efa60c086018361270b565b8716610100850152506101208301819052612148818401858761262a565b6001600160701b0391909116815260200190565b6001600160801b0391909116815260200190565b60008382526040602083015261208a6040830184612662565b93845260208401929092526040830152606082015260800190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612fa157600080fd5b604052919050565b60005b83811015612fc4578181015183820152602001612fac565b83811115611ea25750506000910152565b60e01c90565b600060443d1015612feb576107e2565b600481823e6308c379a0612fff8251612fd5565b14613009576107e2565b6040513d600319016004823e80513d67ffffffffffffffff816024840111818411171561303957505050506107e2565b8284019250825191508082111561305357505050506107e2565b503d8301602082840101111561306b575050506107e2565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461064257600080fd5b801515811461064257600080fd5b6002811061064257600080fd5b6001600160801b038116811461064257600080fd5b60ff8116811461064257600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122000df7616f3389001b75583a1706d38dfc1f830c2a80272a3d9c72bbb0cb6c33864736f6c63430007000033",
  "libraries": {
    "LibAccess": "0x824Ac211d63D628546c255aAABE124f1c4089C5D",
    "LibConfig": "0x3C50fCD9c79A17751870c5d293bf6b6765E530f4",
    "LibGas": "0x019Dc3169a487ADCCaE94fA8dcFcC5740912405c",
    "ProxyAdmin": "0x71eEC1AECD2255b85eadD7130fA05a4941362E3c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableForUse(address)": {
        "notice": "Determine the amount of eth available to use to pay for fees. This includes  any thawing funds that have not yet reached the thaw expiration block."
      },
      "availableGasForWithdraw(address)": {
        "notice": "Determine how much of the gas tank balance is available for withdraw after having  waited a sufficient thaw period."
      },
      "depositGas()": {
        "notice": "Deposit funds into the gas tank"
      },
      "fill((uint128,uint128,address,uint8,(address,uint112),(address,uint112)),address,bytes)": {
        "notice": "Fill an order using the given router and forwarded call data."
      },
      "getConfig()": {
        "notice": "Get the current configuration struct"
      },
      "getDevTeam()": {
        "notice": "Get the dev team wallet/multi-sig address"
      },
      "getLockoutBlocks()": {
        "notice": "Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw."
      },
      "getMinFee()": {
        "notice": "Get the minimum fee required for all orders"
      },
      "getPenaltyFee()": {
        "notice": "Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain."
      },
      "requestWithdrawGas(uint112)": {
        "notice": "Request that funds be thawed and prepared for withdraw after thaw period expires."
      },
      "setConfig((address,uint128,uint128,uint8))": {
        "notice": "Set the current configuration as a bulk setting"
      },
      "setDevTeam(address)": {
        "notice": "Set the dev team wallet/multi-sig address"
      },
      "setLockoutBlocks(uint8)": {
        "notice": "Set the number of blocks to wait before thawed withdraws are allowed"
      },
      "setMinFee(uint128)": {
        "notice": "Set the minimum fee for an order execution"
      },
      "setPenaltyFee(uint128)": {
        "notice": "Set the penalty assessed when a user removes tokens or gas tank funds"
      },
      "thawingFunds(address)": {
        "notice": "Determine the amount of funds actively awaiting the thaw period."
      },
      "withdrawGas(uint112)": {
        "notice": "Withdraw fully thawed funds."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}