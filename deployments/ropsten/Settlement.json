{
  "address": "0x5bb68f9677a322a38F250e6Ff6913D79c4C8dEc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFeePaid",
          "type": "uint256"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexibleFee",
          "type": "uint256"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "TraderPenalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeTokenETHPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethUSDPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_trySwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "failReason",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "addRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract WNative",
          "name": "native",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeTokenETHPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethUSDPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDevTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockoutBlocks",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenaltyFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "team",
          "type": "address"
        }
      ],
      "name": "setDevTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "blocks",
          "type": "uint8"
        }
      ],
      "name": "setLockoutBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setPenaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "swapRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2077b40b59360e573aec826df62280c003ed71ff6934563a161c71fe0ba05a5b",
  "receipt": {
    "to": null,
    "from": "0xBf341c95C52181D4eCa6cf10c3f17316FD262E39",
    "contractAddress": "0x5bb68f9677a322a38F250e6Ff6913D79c4C8dEc9",
    "transactionIndex": 2,
    "gasUsed": "3216488",
    "logsBloom": "0x
    "blockHash": "0x7597e3e8d5a34c0ce9b63d993ae604af3881134026fe916c539e829db46d5650",
    "transactionHash": "0x2077b40b59360e573aec826df62280c003ed71ff6934563a161c71fe0ba05a5b",
    "logs": [],
    "blockNumber": 11387508,
    "cumulativeGasUsed": "3383342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8f6a77101ed36ac458d1eb667f1703d4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeePaid\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TraderPenalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethUSDPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_trySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"failReason\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WNative\",\"name\":\"native\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethUSDPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockoutBlocks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setDevTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blocks\",\"type\":\"uint8\"}],\"name\":\"setLockoutBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setPenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"swapRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositWNative(address,uint256)\":{\"notice\":\"Team's ability to deposit native token into this contract using wrapped  native asset allowance\"},\"fill((address,address,uint256,uint256,uint256,(address,uint112),(address,uint112)),address,bytes)\":{\"notice\":\"Fill an order using the given router and forwarded call data.\"},\"getConfig()\":{\"notice\":\"Get the current configuration struct\"},\"getDevTeam()\":{\"notice\":\"Get the dev team wallet/multi-sig address\"},\"getLockoutBlocks()\":{\"notice\":\"Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw.\"},\"getMinFee()\":{\"notice\":\"Get the minimum fee required for all orders\"},\"getPenaltyFee()\":{\"notice\":\"Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain.\"},\"setConfig((address,uint128,uint128,uint8))\":{\"notice\":\"Set the current configuration as a bulk setting\"},\"setDevTeam(address)\":{\"notice\":\"Set the dev team wallet/multi-sig address\"},\"setLockoutBlocks(uint8)\":{\"notice\":\"Set the number of blocks to wait before thawed withdraws are allowed\"},\"setMinFee(uint128)\":{\"notice\":\"Set the minimum fee for an order execution\"},\"setPenaltyFee(uint128)\":{\"notice\":\"Set the penalty assessed when a user removes tokens or gas tank funds\"},\"withdraw(uint256)\":{\"notice\":\"Team's ability to withdraw ETH balance from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Settlement.sol\":\"Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/BaseAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./libs/LibAccess.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseAccess {\\n    using LibAccess for Types.AccessControl;\\n    \\n\\n    //bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n    //bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = 0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a;\\n    //bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = 0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7;\\n    //bytes32 public constant ACTION_ROLE = keccak256(\\\"ACTION_ROLE\\\");\\n    bytes32 public constant ACTION_ROLE = 0xd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e;\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function hasRole(bytes32 role, address actor) public view returns (bool) {\\n        return LibStorage.getAccessStorage().hasRole(role, actor);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Not pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelay() {\\n        require(hasRole(RELAY_ROLE, _msgSender()), \\\"Not relay\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        Types.InitControls storage ic = LibStorage.getInitControls();\\n        require(ic.initializing || !ic.initialized, \\\"Already initialized\\\");\\n        \\n        bool tlc = !ic.initializing;\\n        if(tlc) {\\n            ic.initializing = true;\\n            ic.initialized = true;\\n        }\\n        _;\\n        if(tlc) {\\n            ic.initializing = false;\\n        }\\n    }\\n\\n    modifier nonReentrant() {\\n        \\n        require(!LibStorage.getAccessStorage().reentrantFlag, \\\"Attempting to re-enter function recursively\\\");\\n        LibStorage.getAccessStorage().reentrantFlag = true;\\n        _;\\n        LibStorage.getAccessStorage().reentrantFlag = false;\\n    }\\n\\n    //================ MUTATIONS ===============/\\n    \\n    function addRole(bytes32 role, address actor) public onlyAdmin {\\n        _setupRole(role, actor);\\n    }\\n\\n    function swapRelay(address oldRelay, address newRelay) public onlyAdmin {\\n        revokeRole(RELAY_ROLE, oldRelay);\\n        addRole(RELAY_ROLE, newRelay);\\n    }\\n\\n    function revokeRole(bytes32 role, address actor) public onlyAdmin {\\n        LibStorage.getAccessStorage()._revokeRole(role, actor);\\n    }\\n\\n    function _setupRole(bytes32 role, address actor) internal {\\n        LibStorage.getAccessStorage()._addRole(role, actor);\\n    }\\n\\n    function initAccess() internal initializer {\\n        address o = _msgSender();\\n        _setupRole(ADMIN_ROLE, o);\\n        _setupRole(PAUSER_ROLE, o);\\n    }\\n}\",\"keccak256\":\"0x1c6a227e7d4c3d74076b6655fc07a70e7677ea21d525e5eb11399c480f137252\",\"license\":\"Unlicense\"},\"contracts/BaseConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./libs/LibConfig.sol\\\";\\nimport \\\"./BaseAccess.sol\\\";\\n\\nabstract contract BaseConfig is BaseAccess {\\n    using LibConfig for Types.Config;\\n   \\n    /**\\n     * Initialize config settings. This is called at initialization time when contracts \\n     * are first deployed.\\n     */\\n    function initConfig(Types.Config memory config) internal {\\n        LibStorage.getConfigStorage().store(config);\\n        BaseAccess.initAccess();\\n    }\\n\\n    /**\\n     * Get the current configuration struct\\n     */\\n    function getConfig() external view returns (Types.Config memory) {\\n        return LibStorage.getConfigStorage().copy();\\n    }\\n\\n    \\n    \\n    //============== VIEWS ================/\\n    /**\\n     * Get the dev team wallet/multi-sig address\\n     */\\n    function getDevTeam() external view returns (address) {\\n        return LibStorage.getConfigStorage().devTeam;\\n    }\\n\\n    /**\\n     * Get the number of blocks to wait before trader can withdraw gas tank funds \\n     * marked for withdraw.\\n     */\\n    function getLockoutBlocks() external view returns (uint8) {\\n        return LibStorage.getConfigStorage().lockoutBlocks;\\n    }\\n\\n    /**\\n     * Get the minimum fee required for all orders\\n     */\\n    function getMinFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().minFee;\\n    }\\n\\n    /**\\n     * Get the penalty fee to asses when trader removes tokens or funds after\\n     * Dexible submits orders on-chain.\\n     */\\n    function getPenaltyFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    /**\\n     * Set the current configuration as a bulk setting\\n     */\\n    function setConfig(Types.Config memory config) public onlyAdmin {\\n        LibStorage.getConfigStorage().store(config);\\n    }\\n\\n    /**\\n     * Set the dev team wallet/multi-sig address\\n     */\\n    function setDevTeam( address team) external onlyAdmin {\\n        LibStorage.getConfigStorage().devTeam = team;\\n    }\\n\\n    /**\\n     * Set the number of blocks to wait before thawed withdraws are allowed\\n     */\\n    function setLockoutBlocks(uint8 blocks) external onlyAdmin {\\n        LibStorage.getConfigStorage().lockoutBlocks = blocks;\\n    }\\n\\n    /**\\n     * Set the minimum fee for an order execution\\n     */\\n    function setMinFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().minFee = fee;\\n    }\\n\\n    /**\\n     * Set the penalty assessed when a user removes tokens or gas tank funds\\n     */\\n    function setPenaltyFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().penaltyFee = fee;\\n    }\\n}\",\"keccak256\":\"0xbb12e9ea10c2f4a7fffe36c4ffaa327586d526e995e61a18d13cd95056d8d6ab\",\"license\":\"Unlicense\"},\"contracts/IDexRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * Abstraction of DEX integration with simple fill function.\\n */\\ninterface IDexRouter {\\n\\n    /**\\n     * Fill an order using the given call data details.\\n     */\\n    function fill(Types.Order memory order, bytes calldata swapData) external returns (bool status, string memory failReason);\\n}\",\"keccak256\":\"0x533da7b055fefcaa060117c9a400dd5a2d94c9427f5c1acf2609bc974be744ae\",\"license\":\"Unlicense\"},\"contracts/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IDexRouter.sol\\\";\\nimport \\\"./BaseConfig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\n\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface WNative is IERC20 {\\n    function withdraw(uint wad) external; \\n}\\n\\ncontract Settlement is BaseConfig {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n    using SafeMath for uint128;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //============= EVENT DEFS =================/\\n    event TraderPenalized(address indexed trader, \\n                          uint256 penalty, \\n                          uint256 gasPaid, \\n                          string reason);\\n    event SwapFailed(address indexed trader, \\n                     string reason, \\n                     IERC20 feeToken, \\n                     uint gasFeePaid);\\n    event SwapSuccess(address indexed trader,\\n                       uint inputAmount,\\n                       uint outputAmount,\\n                       IERC20 feeToken,\\n                       uint gasFee,\\n                       uint dexibleFee);\\n    event ReceivedETH(address indexed sender, uint amount);\\n    event WithdrewETH(address indexed receiver, uint amount);\\n    event PaidGasFunds(address indexed relay, uint amount);\\n    event InsufficientGasFunds(address indexed relay, uint amount);\\n\\n    //============== CONSTANTS ==============/\\n    //gas needed after action executes\\n    uint256 constant OP_GAS = 40_000;\\n\\n    //for final transfers and events\\n    uint256 constant GAS_OVERHEAD = 60_000;\\n\\n    struct BalTracking {\\n        uint256 beforeIn;\\n        uint256 beforeOut;\\n        uint256 afterIn;\\n        uint256 afterOut;\\n    }\\n\\n    receive() external payable {\\n        emit ReceivedETH(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * Fill an order using the given router and forwarded call data.\\n     */\\n    function fill(Types.Order memory order, IDexRouter router, bytes calldata data) public onlyRelay nonReentrant {\\n\\n        //the starting gas isn't actually the starting gas since a significant amount has \\n        //already been burned loading the contract and libs\\n        uint256 startGas = gasleft().add(40_000);\\n\\n        //pre-trade condition checks\\n        BalTracking memory _tracker = _preCheck(order);\\n\\n        //make adjustments to order input if fee token is sell-side\\n        Types.Order memory adjusted = _preAdjustOrder(order);\\n\\n        //execute fill\\n        (bool success, string memory failReason) = performFill(adjusted, router, data);\\n\\n        //post-trade condition check\\n        _postCheck(order, _tracker, success);\\n\\n        //post-trade actions to transfer fees, etc.\\n        _postActions(order, success, failReason, _tracker, startGas);\\n    } \\n\\n    /**\\n     * Team's ability to withdraw ETH balance from the contract.\\n     */\\n    function withdraw(uint amount) public onlyAdmin {\\n        require(amount <= address(this).balance, \\\"Insufficient balance to make transfer\\\");\\n        _msgSender().transfer(amount);\\n        emit WithdrewETH(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * Team's ability to deposit native token into this contract using wrapped \\n     * native asset allowance\\n     */\\n    function depositWNative(WNative native, uint amount) public {\\n        uint spend = native.allowance(_msgSender(), address(this));\\n        require(spend >= amount, \\\"Insufficient spend allowance\\\");\\n        native.transferFrom(_msgSender(), address(this), amount);\\n        native.withdraw(amount);\\n    }\\n\\n    // @dev initialize the settlement contract \\n    function initialize(Types.Config memory config) public initializer {\\n        BaseConfig.initConfig(config);\\n    }\\n\\n    // @dev whether the trader has a token balance to support input side of order\\n    function _hasTokens(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.balanceOf(order.trader) >= order.input.amount;\\n        return b;\\n    }\\n\\n    // @dev whether the trader has approved this contract to spend enought for order\\n    function _canSpend(Types.Order memory order) internal view returns (bool) {\\n        bool b = order.input.token.allowance(order.trader, address(this)) >= order.input.amount;\\n        return b;\\n    }\\n\\n    // @dev make sure trader has token balance and allowance to cover order\\n    function _preCheck(Types.Order memory order) internal view returns (BalTracking memory) {\\n        uint bal = order.input.token.balanceOf(order.trader);\\n        require(bal >= order.input.amount,\\\"Insufficient input token balance to trade\\\");\\n        require(_canSpend(order), \\\"Insufficient spend allowance on input token\\\");\\n        //before balances\\n        return BalTracking(\\n            bal,\\n            order.output.token.balanceOf(address(this)),\\n            0,0\\n        );\\n    }\\n\\n    \\n    // @dev compute the gas and BPS fee for an order\\n    function _computeFees(Types.Order memory order, uint gasUsed) internal view returns (uint gasFee, uint dexibleFee) {\\n        console.log(\\\"---- Computing Fees -----\\\");\\n        uint estGasCost = tx.gasprice * gasUsed;\\n        console.log(\\\"Estimated gas cost\\\", estGasCost);\\n        uint decs = IERC20Metadata(address(order.feeToken)).decimals();\\n        gasFee = (estGasCost.mul(10**decs)).div(order.feeTokenETHPrice);\\n        console.log(\\\"Gas portion in fee token\\\", gasFee);\\n\\n        //all pricing comes in as 18-decimal points. We need to maintain that level \\n        //of granularity when computing USD price for fee token. This results in \\n        //36-decimal point number\\n        console.log(\\\"Order native USD price\\\", order.ethUSDPrice);\\n        console.log(\\\"Order fee token native price\\\", order.feeTokenETHPrice);\\n        uint feeTokenUSDPrice = order.ethUSDPrice.mul(order.feeTokenETHPrice);\\n        console.log(\\\"Fee token price in USD\\\", feeTokenUSDPrice);\\n        \\n        //now divide the USD fee (in equivalent fee-token decimals) by the usd price for fee token\\n        //that tells us how many tokens make up the equivalent USD value.\\n        dexibleFee = LibStorage.getConfigStorage().minFee.mul(10**(36+decs)).div(feeTokenUSDPrice);\\n\\n        console.log(\\\"Dexible fee\\\", dexibleFee); \\n        console.log(\\\"---- End compute fees ----\\\");   \\n    }\\n\\n    // @dev make adjustments to input amount if the fee token is the sell-side token\\n    function _preAdjustOrder(Types.Order memory order) internal view returns (Types.Order memory) {\\n        if(order.feeToken == order.input.token) {\\n            console.log(\\\"Taking fee from output token\\\");\\n            uint newInput = 0;\\n            {\\n                //compute gas and bps fees\\n                (uint gasPortion, uint feePortion) = _computeFees(order, order.gasEstimate);\\n\\n                //take out fees before swap\\n                newInput = order.input.amount.sub(gasPortion.add(feePortion));\\n                console.log(\\\"Old input amount\\\", order.input.amount);\\n                console.log(\\\"New input amount\\\", newInput);\\n            }\\n\\n            //create new order using most of same info except new input amount\\n            return Types.Order({trader: order.trader, \\n                feeToken: order.feeToken,\\n                feeTokenETHPrice: order.feeTokenETHPrice,\\n                gasEstimate: order.gasEstimate,\\n                ethUSDPrice: order.ethUSDPrice,\\n                input: Types.TokenAmount({\\n                    token: order.input.token,\\n                    amount: uint112(newInput)\\n                }),\\n                output: order.output\\n            });\\n        } \\n        //output fee does not need to make any adjustments. Everything is done after swap\\n        return order;  \\n    }\\n\\n    // @dev perform the actual token swap, catching any problems along the way so we can handle\\n    // gas reimbursements correctly\\n    function performFill(Types.Order memory order, IDexRouter router, bytes calldata data) internal returns (bool success, string memory failReason) {\\n        //execute action. This is critical that we use our own internal call to actually\\n        //perform swap inside trycatch. This way, transferred funds to router are \\n        //reverted if swap fails\\n\\n        try this._trySwap{\\n            gas: gasleft().sub(OP_GAS)\\n        }(order, router, data) returns (bool _success, string memory _failReason) {\\n            if(!_success) {\\n                console.log(\\\"FailReason\\\", _failReason);\\n            }\\n            return (_success, _failReason);\\n        } catch Error(string memory err) {\\n            success = false;\\n            failReason = err;\\n            console.log(\\\"FailReason\\\", err);\\n        } catch {\\n            success = false;\\n            failReason = \\\"Unknown fail reason\\\";\\n        }\\n        \\n        \\n    }\\n\\n    // @dev perform any pre-swap actions, like transferring tokens to router\\n    function _preActions(Types.Order memory order, IDexRouter router) internal {\\n        //transfer input tokens to router so it can perform dex trades\\n        console.log(\\\"Transfering input for trading:\\\", order.input.amount);\\n        order.input.token.safeTransferFrom(order.trader, address(this), order.input.amount); //address(router), order.input.amount);\\n    }\\n\\n    // @dev try making the swap through router.\\n    function _trySwap(Types.Order calldata order, IDexRouter router, bytes calldata data) external returns (bool success, string memory failReason) {\\n        require(msg.sender == address(this), \\\"Can only be called by settlement contract\\\");\\n        _preActions(order, router);\\n\\n        //call data contains the target address and data to pass to it to execute\\n        (address swapTarget, address allowanceTarget, bytes memory data) = abi.decode(data, (address,address,bytes));\\n      \\n\\n        console.log(\\\"Approving spend for target\\\", allowanceTarget);\\n\\n        //for protocols that require zero-first approvals\\n        require(order.input.token.approve(allowanceTarget, 0));\\n\\n        //make sure 0x target has approval to spend this contract's tokens\\n        require(order.input.token.approve(allowanceTarget, order.input.amount));\\n\\n        console.log(\\\"Calling swapTarget\\\", swapTarget);\\n\\n        (bool s,bytes memory returnData) = swapTarget.call{gas: gasleft()}(data);\\n        console.logBytes(returnData);\\n\\n        //(bool s, string memory err) = router.fill(order, data);\\n        if(!s) {\\n            revert(\\\"Failed to swap\\\");\\n        }\\n        return (s, \\\"\\\");\\n    }\\n\\n    // @dev after swap, check if expected balances match\\n    function _postCheck(Types.Order memory order, BalTracking memory _tracking, bool success) internal view {\\n        \\n        _tracking.afterIn = order.input.token.balanceOf(order.trader);\\n\\n        if(!success) {\\n            //have to revert if funds were not refunded in order to roll everything back.\\n            //in this case, the router is at fault, which is Dexible's fault and therefore \\n            //Dexible relay address should eat the cost of failure\\n            console.log(\\\"Input bal b4\\\", _tracking.beforeIn);\\n            console.log(\\\"Input bal after\\\", _tracking.afterIn);\\n            require(_tracking.afterIn == _tracking.beforeIn, \\\"failed trade action did not refund input funds\\\");\\n        } else {\\n            _tracking.afterOut = order.output.token.balanceOf(address(this));\\n            //if the in/out amounts don't line up, then transfers weren't made properly in the\\n            //router.\\n\\n            console.log(\\\"Output token balance before swap\\\", _tracking.beforeOut);\\n            console.log(\\\"Output balance after swap\\\", _tracking.afterOut);\\n            console.log(\\\"Expected output amount\\\", order.output.amount);\\n            require(_tracking.afterOut.sub(_tracking.beforeOut) >= order.output.amount, \\\"Trade action did not transfer output tokens to trader\\\");\\n            require(_tracking.beforeIn.sub(_tracking.afterIn) <= order.input.amount, \\\"Used too many input tokens\\\");\\n        }\\n    }\\n\\n    // @dev carry out post-swap actions, transferring funds, etc.\\n    function _postActions(Types.Order memory order, \\n                          bool success, \\n                          string memory failReason, \\n                          BalTracking memory _tracking,\\n                          uint startGas) internal {\\n\\n        //reimburse relay estimated gas fees. Add a little overhead for the remaining\\n        //ops in this function\\n        uint256 totalGasUsed = startGas.sub(gasleft()).add(GAS_OVERHEAD);\\n        console.log(\\\"Total gas used\\\", totalGasUsed);\\n\\n        uint256 gasFee = totalGasUsed.mul(tx.gasprice);\\n        console.log(\\\"Gas fee\\\", gasFee);\\n\\n        //compute post-swap fees again now that we have a better idea of actual gas usage\\n        (uint gasInFeeToken, uint dexibleFee) = _computeFees(order, totalGasUsed);\\n        \\n        //if there is ETH in the contract, reimburse the relay that called the fill function\\n        if(address(this).balance < gasFee) {\\n            console.log(\\\"Cannot reimburse relay since do not have enough funds\\\");\\n            emit InsufficientGasFunds(_msgSender(), gasFee);\\n        } else {\\n            console.log(\\\"Transfering gas fee to relay\\\");\\n            _msgSender().transfer(gasFee);\\n            emit PaidGasFunds(_msgSender(), gasFee);\\n        }\\n       \\n        uint fees = 0;\\n        if(!success) {\\n            //we still owe the gas fees to the team/relay even though the swap failed. This is because\\n            //the trader may have set slippage too low, thus increasing the chance of failure.\\n            fees = (gasInFeeToken);\\n            console.log(\\\"Failed gas fee\\\", fees);\\n            if(order.feeToken == order.input.token) {\\n                console.log(\\\"Transferring partial input token to devteam for failure gas fees\\\");\\n                order.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, fees);\\n                emit SwapFailed(order.trader,failReason, order.feeToken, fees);\\n            } else {\\n                console.log(\\\"Fee token is output; therefore cannot reimburse team for failure gas fees\\\");\\n                emit SwapFailed(order.trader,failReason, order.feeToken, 0);\\n            }\\n            \\n            //tell trader it failed\\n            console.log(\\\"Swap failed\\\");\\n            \\n        } else {\\n            //on success, the gas and bps fee are paid to the dev team\\n            fees = gasInFeeToken.add(dexibleFee);\\n\\n            //gross is delta between starting/ending balance before/after swap\\n            uint grossOut = _tracking.afterOut.sub(_tracking.beforeOut);\\n            console.log(\\\"Gross output amount\\\", grossOut);\\n\\n            uint toTrader = 0;\\n            if(order.feeToken == order.input.token) {\\n                //if we take fees from the input token,\\n                //the trader gets all output \\n                toTrader = grossOut;\\n                console.log(\\\"Transferring fees from input token to devTeam\\\", fees);\\n                order.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, fees);\\n            } else {\\n                //otherwise, trader gets a portion of the output\\n                //and team gets rest\\n                console.log(\\\"Reducing output by fees\\\", fees);\\n                toTrader = grossOut.sub(fees);\\n                \\n                //output comes from this contract, not trader for fees\\n                console.log(\\\"Sending fees from output token to team\\\", fees);\\n                order.feeToken.safeTransfer(LibStorage.getConfigStorage().devTeam, fees);\\n            }\\n            \\n            console.log(\\\"Sending total output to trader\\\", toTrader);\\n            order.output.token.safeTransfer(order.trader, toTrader);\\n\\n            emit SwapSuccess(order.trader,\\n                        order.input.amount,\\n                        toTrader, \\n                        order.feeToken,\\n                        gasInFeeToken,\\n                        dexibleFee); \\n            console.log(\\\"Finished swap\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xcc31e2d33d18f25a95d667a92b9cf2a5ce870a3826cfeb1439b85719220951c2\",\"license\":\"Unlicense\"},\"contracts/Types.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Types {\\n\\n    struct TokenAmount {\\n        IERC20 token;\\n        uint112 amount;\\n    }\\n\\n    //status of order. Only tracked on action from user/miners\\n    enum OrderStatus {\\n        UNDEFINED,\\n        PENDING,\\n        FILLED,\\n        CANCELLED,\\n        PENALIZED\\n    }\\n\\n    struct Order {\\n\\n        //trader that owns the order\\n        address trader;\\n\\n        //the token we are taking as fee\\n        IERC20 feeToken;\\n\\n        //eth price of fee token in 18-decimal units\\n        uint feeTokenETHPrice;\\n\\n        //current price of ETH in USD units\\n        uint ethUSDPrice;\\n\\n        //an estimate of gas to use to fill the order\\n        uint gasEstimate;\\n\\n        //token being offered\\n        TokenAmount input;\\n\\n        //token wanted\\n        TokenAmount output;\\n    }\\n\\n    //============== CONFIG STATE =============/\\n    struct Config {\\n        //dev team address (120b)\\n        address devTeam;\\n\\n        //bps fee expressed as a whole number\\n        uint128 minFee;\\n\\n        //penalty a user faces for removing assets or \\n        //allowances before a trade\\n        uint128 penaltyFee;\\n\\n        //number of blocks to lock stake and order cancellations\\n        uint8 lockoutBlocks;\\n    }\\n\\n    //============== ACCESS STATE =============/\\n    //storage structure of access controls\\n    struct AccessControl {\\n        bool reentrantFlag;\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    //============== INITIALIZATION STATE =============/\\n    struct InitControls {\\n        bool initialized;\\n        bool initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3c8069a1a9ed04c31a67496bdceaeab96382a87df0fa14ee928acacabe13baf2\",\"license\":\"Unlicense\"},\"contracts/libs/LibAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Types.sol\\\";\\n\\n\\nlibrary LibAccess {\\n    \\n    function hasRole(Types.AccessControl storage ac, bytes32 role, address actor) external view returns (bool) {\\n        return ac.roles[role][actor];\\n    }\\n\\n    function _addRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        ac.roles[role][actor] = true;\\n    }\\n\\n    function _revokeRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        delete ac.roles[role][actor];\\n    }\\n}\",\"keccak256\":\"0x30f51b897619d1a661871173b3572497bf68a4e5d7faaf20ebfffe4137c13984\",\"license\":\"Unlicense\"},\"contracts/libs/LibConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibConfig {\\n\\n\\n    function store(Types.Config storage cs, Types.Config memory config) public {\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n    }\\n\\n    function copy(Types.Config storage config) public view returns(Types.Config memory) {\\n        Types.Config memory cs;\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n        return cs;\\n    }\\n    \\n\\n    //============== VIEWS ================/\\n    \\n    function getDevTeam(Types.Config storage _config) external view returns (address) {\\n        return _config.devTeam;\\n    }\\n\\n    function getLockoutBlocks(Types.Config storage _config) external view returns (uint8) {\\n        return _config.lockoutBlocks;\\n    }\\n\\n    function getMinFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.minFee;\\n    }\\n\\n    function getPenaltyFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    function setDevTeam(Types.Config storage _config, address team) external{\\n        _config.devTeam = team;\\n    }\\n\\n    function setLockoutBlocks(Types.Config storage _config, uint8 blocks) external{\\n        _config.lockoutBlocks = blocks;\\n    }\\n\\n    function setMinFee(Types.Config storage _config, uint128 fee) external{\\n        _config.minFee = fee;\\n    }\\n\\n    function setPenaltyFee(Types.Config storage _config, uint128 fee) external{\\n        _config.penaltyFee = fee;\\n    }\\n    \\n}\",\"keccak256\":\"0xaadcf6273e853a6057f400790831a95320c40940ecba17f12c6f13c4625f3136\",\"license\":\"Unlicense\"},\"contracts/libs/LibStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibStorage {\\n\\n    //keccak256(\\\"com.buidlhub.config.ConfigStorage\\\");\\n    bytes32 constant CONFIG_STORAGE_KEY = 0xf5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b9;\\n\\n     //keccak256(\\\"com.buidlhub.access.AccessControls\\\");\\n    bytes32 constant ACCESS_STORAGE_KEY = 0x3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e9;\\n\\n    //keccak256(\\\"com.buidlhub.init.InitControls\\\");\\n    bytes32 constant INIT_STORAGE_KEY = 0xd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d4741;\\n\\n    //============= STORAGE ACCESSORS ==========/\\n   \\n    function getConfigStorage() internal pure returns (Types.Config storage cs) {\\n        assembly { cs.slot := CONFIG_STORAGE_KEY }\\n    }\\n\\n    function getAccessStorage() internal pure returns (Types.AccessControl storage acs) {\\n        assembly { acs.slot := ACCESS_STORAGE_KEY }\\n    }\\n\\n    function getInitControls() internal pure returns (Types.InitControls storage ic) {\\n        assembly { ic.slot := INIT_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0xfccedc3189a072c7aea9e515018dadf87f8284984b1e6f36d0b058c5876a1c18\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806375b238fc116100b6578063c13da0181161006f578063c13da018146103be578063c3f909d4146103de578063d547741f14610400578063e63ab1e914610420578063e959b38a14610435578063f102669b146104555761018c565b806375b238fc146102f7578063775506101461030c5780638d3403fd14610321578063904cd9f51461034157806391d148541461036f578063b1cf4b0c1461039c5761018c565b80633f51e182116101085780633f51e1821461023357806340ee75bb146102535780634e1c6829146102735780635716d1ce146102935780635cf34bcf146102b35780636a9447b5146102d55761018c565b8063044218231461019157806327054df6146101bc5780632e1a7d4d146101d1578063334c3c65146101f35780633d191fa8146102135761018c565b3661018c57336001600160a01b03167f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c279624346040516101829190612fa4565b60405180910390a2005b600080fd5b34801561019d57600080fd5b506101a6610475565b6040516101b39190612fa4565b60405180910390f35b3480156101c857600080fd5b506101a6610487565b3480156101dd57600080fd5b506101f16101ec366004612db6565b6104ab565b005b3480156101ff57600080fd5b506101f161020e366004612bf7565b610596565b34801561021f57600080fd5b506101f161022e366004612d42565b61063f565b34801561023f57600080fd5b506101f161024e366004612bf7565b61073e565b34801561025f57600080fd5b506101f161026e366004612a0f565b6107c4565b34801561027f57600080fd5b506101f161028e366004612d9a565b610824565b34801561029f57600080fd5b506101f16102ae366004612bcc565b610884565b3480156102bf57600080fd5b506102c8610a1a565b6040516101b39190613625565b3480156102e157600080fd5b506102ea610a37565b6040516101b39190612ef1565b34801561030357600080fd5b506101a6610a50565b34801561031857600080fd5b506102c8610a62565b34801561032d57600080fd5b506101f161033c366004612de6565b610a85565b34801561034d57600080fd5b5061036161035c366004612cbb565b610adc565b6040516101b3929190612f89565b34801561037b57600080fd5b5061038f61038a366004612ba8565b610d8e565b6040516101b39190612f7e565b3480156103a857600080fd5b506103b1610e2b565b6040516101b39190613639565b3480156103ca57600080fd5b506101f16103d9366004612acb565b610e41565b3480156103ea57600080fd5b506103f3610eab565b6040516101b3919061354d565b34801561040c57600080fd5b506101f161041b366004612ba8565b610f46565b34801561042c57600080fd5b506101a6610f90565b34801561044157600080fd5b506101f1610450366004612ba8565b610fb4565b34801561046157600080fd5b506101f1610470366004612d9a565b610ff4565b6000805160206137f183398151915281565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b6104c560008051602061389983398151915261038a611060565b6104ea5760405162461bcd60e51b81526004016104e19061350b565b60405180910390fd5b4781111561050a5760405162461bcd60e51b81526004016104e1906131ec565b610512611060565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561054a573d6000803e3d6000fd5b50610553611060565b6001600160a01b03167faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c0668260405161058b9190612fa4565b60405180910390a250565b6105b060008051602061389983398151915261038a611060565b6105cc5760405162461bcd60e51b81526004016104e19061350b565b6105d4611064565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c79161060c9190859060040161355b565b60006040518083038186803b15801561062457600080fd5b505af4158015610638573d6000803e3d6000fd5b5050505050565b6106596000805160206137f183398151915261038a611060565b6106755760405162461bcd60e51b81526004016104e1906133e5565b61067d611088565b5460ff161561069e5760405162461bcd60e51b81526004016104e190613068565b60016106a8611088565b805460ff191691151591909117905560006106c6619c405a906110ac565b90506106d0612831565b6106d9866110d1565b90506106e3612859565b6106ec87611265565b9050600060606106fe8389898961141d565b9150915061070d898584611567565b61071a8983838789611867565b50505050506000610729611088565b805460ff191691151591909117905550505050565b6000610748611e32565b8054909150610100900460ff16806107625750805460ff16155b61077e5760405162461bcd60e51b81526004016104e190613494565b8054610100900460ff161580156107a657815460ff1961ff0019909116610100171660011782555b6107af83611e56565b80156107bf57815461ff00191682555b505050565b6107de60008051602061389983398151915261038a611060565b6107fa5760405162461bcd60e51b81526004016104e19061350b565b80610803611064565b80546001600160a01b0319166001600160a01b039290921691909117905550565b61083e60008051602061389983398151915261038a611060565b61085a5760405162461bcd60e51b81526004016104e19061350b565b80610863611064565b60010180546001600160801b03928316600160801b02921691909117905550565b6000826001600160a01b031663dd62ed3e61089d611060565b306040518363ffffffff1660e01b81526004016108bb929190612f05565b60206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190612dce565b90508181101561092d5760405162461bcd60e51b81526004016104e1906133ae565b826001600160a01b03166323b872dd610944611060565b30856040518463ffffffff1660e01b815260040161096493929190612f1f565b602060405180830381600087803b15801561097e57600080fd5b505af1158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190612b03565b50604051632e1a7d4d60e01b81526001600160a01b03841690632e1a7d4d906109e3908590600401612fa4565b600060405180830381600087803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b50505050505050565b6000610a24611064565b600101546001600160801b031690505b90565b6000610a41611064565b546001600160a01b0316905090565b60008051602061389983398151915281565b6000610a6c611064565b60010154600160801b90046001600160801b0316919050565b610a9f60008051602061389983398151915261038a611060565b610abb5760405162461bcd60e51b81526004016104e19061350b565b80610ac4611064565b600201805460ff191660ff9290921691909117905550565b60006060333014610aff5760405162461bcd60e51b81526004016104e190613365565b610b17610b1136889003880188612d26565b86611ed1565b6000806060610b2886880188612a2b565b925092509250610b6d6040518060400160405280601a81526020017f417070726f76696e67207370656e6420666f722074617267657400000000000081525083611f4f565b610b7d60c08a0160a08b01612a0f565b6001600160a01b031663095ea7b38360006040518363ffffffff1660e01b8152600401610bab929190612f43565b602060405180830381600087803b158015610bc557600080fd5b505af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd9190612b03565b610c0657600080fd5b610c1660c08a0160a08b01612a0f565b6001600160a01b031663095ea7b383610c3560e08d0160c08e01612d73565b6040518363ffffffff1660e01b8152600401610c52929190612f5c565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190612b03565b610cad57600080fd5b610ce16040518060400160405280601281526020017110d85b1b1a5b99c81cddd85c15185c99d95d60721b81525084611f4f565b60006060846001600160a01b03165a84604051610cfe9190612ed5565b60006040518083038160008787f1925050503d8060008114610d3c576040519150601f19603f3d011682016040523d82523d6000602084013e610d41565b606091505b5091509150610d4f81611f94565b81610d6c5760405162461bcd60e51b81526004016104e190613268565b5060408051602081019091526000815290955093505050505b94509492505050565b6000610d98611088565b604051630f40931b60e41b815273__$712f9bd20561de4f0bfbc1442284f16fb4$__9163f40931b091610dd291908790879060040161352e565b60206040518083038186803b158015610dea57600080fd5b505af4158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e229190612b03565b90505b92915050565b6000610e35611064565b6002015460ff16905090565b610e5b60008051602061389983398151915261038a611060565b610e775760405162461bcd60e51b81526004016104e19061350b565b610e8f6000805160206137f183398151915283610f46565b610ea76000805160206137f183398151915282610fb4565b5050565b610eb36128b3565b610ebb611064565b604051636d73f0db60e01b815273__$015d7794271f690550e5fe4793e4b79169$__91636d73f0db91610ef19190600401612fa4565b60806040518083038186803b158015610f0957600080fd5b505af4158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190612c5f565b905090565b610f6060008051602061389983398151915261038a611060565b610f7c5760405162461bcd60e51b81526004016104e19061350b565b610ea78282610f89611088565b9190611fd7565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b610fce60008051602061389983398151915261038a611060565b610fea5760405162461bcd60e51b81526004016104e19061350b565b610ea78282612006565b61100e60008051602061389983398151915261038a611060565b61102a5760405162461bcd60e51b81526004016104e19061350b565b80611033611064565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b3390565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b600082820183811015610e225760405162461bcd60e51b81526004016104e1906130b3565b6110d9612831565b60a08201515182516040516370a0823160e01b81526000926001600160a01b0316916370a082319161110e9190600401612ef1565b60206040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190612dce565b90508260a00151602001516001600160701b03168110156111915760405162461bcd60e51b81526004016104e19061331c565b61119a8361201a565b6111b65760405162461bcd60e51b81526004016104e1906132d1565b60405180608001604052808281526020018460c00151600001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111fb9190612ef1565b60206040518083038186803b15801561121357600080fd5b505afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190612dce565b81526020016000815260200160008152509150505b919050565b61126d612859565b8160a00151600001516001600160a01b031682602001516001600160a01b03161415611419576112d16040518060400160405280601c81526020017f54616b696e67206665652066726f6d206f757470757420746f6b656e000000008152506120bf565b600080806112e3858660800151612102565b909250905061130d6112f583836110ac565b60a0870151602001516001600160701b0316906123d1565b92506113526040518060400160405280601081526020016f13db19081a5b9c1d5d08185b5bdd5b9d60821b8152508660a00151602001516001600160701b03166123f9565b6113846040518060400160405280601081526020016f13995dc81a5b9c1d5d08185b5bdd5b9d60821b815250846123f9565b50506040518060e0016040528084600001516001600160a01b0316815260200184602001516001600160a01b0316815260200184604001518152602001846060015181526020018460800151815260200160405180604001604052808660a00151600001516001600160a01b03168152602001846001600160701b031681525081526020018460c00151815250915050611260565b5090565b600060603063904cd9f5611434619c405a906123d1565b888888886040518663ffffffff1660e01b8152600401611457949392919061356f565b600060405180830381600088803b15801561147157600080fd5b5087f1935050505080156114a757506040513d6000823e601f3d908101601f191682016040526114a49190810190612b1f565b60015b61152c576114b36136c4565b806114be57506114f7565b600092508091506114f16040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b8152508261243e565b50611527565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000905b610d85565b8161155d5761155d6040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b8152508261243e565b9092509050610d85565b60a08301515183516040516370a0823160e01b81526001600160a01b03909216916370a082319161159a91600401612ef1565b60206040518083038186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ea9190612dce565b604083015280611684576116266040518060400160405280600c81526020016b125b9c1d5d0818985b08188d60a21b81525083600001516123f9565b61165b6040518060400160405280600f81526020016e24b7383aba103130b61030b33a32b960891b81525083604001516123f9565b815160408301511461167f5760405162461bcd60e51b81526004016104e19061319e565b6107bf565b60c0830151516040516370a0823160e01b81526001600160a01b03909116906370a08231906116b7903090600401612ef1565b60206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117079190612dce565b60608301526040805180820190915260208082527f4f757470757420746f6b656e2062616c616e6365206265666f726520737761708183015283015161174d91906123f9565b6117906040518060400160405280601981526020017f4f75747075742062616c616e636520616674657220737761700000000000000081525083606001516123f9565b6117d960405180604001604052806016815260200175115e1c1958dd1959081bdd5d1c1d5d08185b5bdd5b9d60521b8152508460c00151602001516001600160701b03166123f9565b8260c00151602001516001600160701b0316611806836020015184606001516123d190919063ffffffff16565b10156118245760405162461bcd60e51b81526004016104e190613408565b60a083015160200151604083015183516001600160701b0390921691611849916123d1565b11156107bf5760405162461bcd60e51b81526004016104e190613231565b600061188061ea6061187a5a85906123d1565b906110ac565b90506118b26040518060400160405280600e81526020016d151bdd185b0819d85cc81d5cd95960921b815250826123f9565b60006118be823a612483565b90506118e9604051806040016040528060078152602001664761732066656560c81b815250826123f9565b6000806118f68985612102565b91509150824710156119705761192360405180606001604052806035815260200161383e603591396120bf565b61192b611060565b6001600160a01b03167f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda846040516119639190612fa4565b60405180910390a2611a38565b6119ae6040518060400160405280601c81526020017f5472616e73666572696e67206761732066656520746f2072656c6179000000008152506120bf565b6119b6611060565b6001600160a01b03166108fc849081150290604051600060405180830381858888f193505050501580156119ee573d6000803e3d6000fd5b506119f7611060565b6001600160a01b03167f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d05784604051611a2f9190612fa4565b60405180910390a25b600088611bd457829050611a726040518060400160405280600e81526020016d4661696c6564206761732066656560901b815250826123f9565b8960a00151600001516001600160a01b03168a602001516001600160a01b03161415611b3357611ab96040518060600160405280604081526020016137b1604091396120bf565b8951611ae190611ac7611064565b5460208d01516001600160a01b03908116929116846124bd565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c6020015184604051611b2693929190612fea565b60405180910390a2611ba3565b611b546040518060800160405280604981526020016138b9604991396120bf565b89600001516001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e898c602001516000604051611b9a93929190612fea565b60405180910390a25b611bcf6040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b8152506120bf565b611e26565b611bde83836110ac565b90506000611bfd886020015189606001516123d190919063ffffffff16565b9050611c346040518060400160405280601381526020017211dc9bdcdcc81bdd5d1c1d5d08185b5bdd5b9d606a1b815250826123f9565b60008b60a00151600001516001600160a01b03168c602001516001600160a01b03161415611cae57819050611c816040518060600160405280602d8152602001613811602d9139846123f9565b8b51611ca990611c8f611064565b5460208f01516001600160a01b03908116929116866124bd565b611d3f565b611ced6040518060400160405280601781526020017f5265647563696e67206f75747075742062792066656573000000000000000000815250846123f9565b611cf782846123d1565b9050611d1b60405180606001604052806026815260200161387360269139846123f9565b611d3f611d26611064565b5460208e01516001600160a01b0390811691168561251b565b611d7e6040518060400160405280601e81526020017f53656e64696e6720746f74616c206f757470757420746f207472616465720000815250826123f9565b8b5160c08d015151611d9c916001600160a01b03909116908361251b565b8b600001516001600160a01b03167f3491be8ca1b3f4f9e7e74b9955a4600c2613ce85d639eaa123d5b733f59e93be8d60a0015160200151838f602001518989604051611ded9594939291906135ee565b60405180910390a2611e236040518060400160405280600d81526020016c046696e6973686564207377617609c1b8152506120bf565b50505b50505050505050505050565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b611e5e611064565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c791611e969190859060040161355b565b60006040518083038186803b158015611eae57600080fd5b505af4158015611ec2573d6000803e3d6000fd5b50505050611ece61253a565b50565b611f216040518060400160405280601e81526020017f5472616e73666572696e6720696e70757420666f722074726164696e673a00008152508360a00151602001516001600160701b03166123f9565b815160a083015160208101519051610ea7926001600160a01b039091169130906001600160701b03166124bd565b610ea78282604051602401611f65929190612fc0565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052612603565b611ece81604051602401611fa89190612fad565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b179052612603565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b610ea78282612013611088565b9190612624565b60a0810151602081015190518251604051636eb1769f60e11b815260009384936001600160701b03909116926001600160a01b039091169163dd62ed3e91612066913090600401612f05565b60206040518083038186803b15801561207e57600080fd5b505afa158015612092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b69190612dce565b10159392505050565b611ece816040516024016120d39190612fad565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612603565b6000806121436040518060400160405280601981526020017f2d2d2d2d20436f6d707574696e672046656573202d2d2d2d2d000000000000008152506120bf565b604080518082019091526012815271115cdd1a5b585d19590819d85cc818dbdcdd60721b60208201523a84029061217a90826123f9565b600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121b957600080fd5b505afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190612e02565b60ff16905061221a866040015161221483600a0a8561248390919063ffffffff16565b90612657565b935061225b6040518060400160405280601881526020017f47617320706f7274696f6e20696e2066656520746f6b656e0000000000000000815250856123f9565b612297604051806040016040528060168152602001754f72646572206e61746976652055534420707269636560501b81525087606001516123f9565b6122da6040518060400160405280601c81526020017f4f726465722066656520746f6b656e206e61746976652070726963650000000081525087604001516123f9565b60006122f78760400151886060015161248390919063ffffffff16565b905061233160405180604001604052806016815260200175119959481d1bdad95b881c1c9a58d9481a5b881554d160521b815250826123f9565b61235a8161221484602401600a0a612347611064565b600101546001600160801b031690612483565b93506123896040518060400160405280600b81526020016a44657869626c652066656560a81b815250856123f9565b6123c76040518060400160405280601a81526020017f2d2d2d2d20456e6420636f6d707574652066656573202d2d2d2d0000000000008152506120bf565b5050509250929050565b6000828211156123f35760405162461bcd60e51b81526004016104e1906130ea565b50900390565b610ea7828260405160240161240f929190613046565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612603565b610ea78282604051602401612454929190613018565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052612603565b60008261249257506000610e25565b8282028284828161249f57fe5b0414610e225760405162461bcd60e51b81526004016104e190613290565b612515846323b872dd60e01b8585856040516024016124de93929190612f1f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612689565b50505050565b6107bf8363a9059cbb60e01b84846040516024016124de929190612f43565b6000612544611e32565b8054909150610100900460ff168061255e5750805460ff16155b61257a5760405162461bcd60e51b81526004016104e190613494565b8054610100900460ff161580156125a257815460ff1961ff0019909116610100171660011782555b60006125ac611060565b90506125c660008051602061389983398151915282612006565b6125f07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82612006565b508015610ea75750805461ff0019169055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b60008082116126785760405162461bcd60e51b81526004016104e190613167565b81838161268157fe5b049392505050565b60606126de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127189092919063ffffffff16565b8051909150156107bf57808060200190518101906126fc9190612b03565b6107bf5760405162461bcd60e51b81526004016104e1906134c1565b60606127278484600085612731565b90505b9392505050565b6060824710156127535760405162461bcd60e51b81526004016104e190613121565b61275c856127f2565b6127785760405162461bcd60e51b81526004016104e19061345d565b60006060866001600160a01b031685876040516127959190612ed5565b60006040518083038185875af1925050503d80600081146127d2576040519150601f19603f3d011682016040523d82523d6000602084013e6127d7565b606091505b50915091506127e78282866127f8565b979650505050505050565b3b151590565b6060831561280757508161272a565b8251156128175782518084602001fd5b8160405162461bcd60e51b81526004016104e19190612fad565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016128a16128da565b81526020016128ae6128da565b905290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080518082019091526000808252602082015290565b60008083601f840112612902578182fd5b50813567ffffffffffffffff811115612919578182fd5b60208301915083602082850101111561293157600080fd5b9250929050565b6000610120828403121561294a578081fd5b61295460e0613647565b9050813561296181613769565b8152602082013561297181613769565b806020830152506040820135604082015260608201356060820152608082013560808201526129a38360a084016129c0565b60a08201526129b58360e084016129c0565b60c082015292915050565b6000604082840312156129d1578081fd5b6129db6040613647565b905081356129e881613769565b815260208201356001600160701b0381168114612a0457600080fd5b602082015292915050565b600060208284031215612a20578081fd5b8135610e2281613769565b600080600060608486031215612a3f578182fd5b8335612a4a81613769565b92506020840135612a5a81613769565b9150604084013567ffffffffffffffff811115612a75578182fd5b8401601f81018613612a85578182fd5b8035612a98612a938261366e565b613647565b818152876020838501011115612aac578384fd5b8160208401602083013783602083830101528093505050509250925092565b60008060408385031215612add578182fd5b8235612ae881613769565b91506020830135612af881613769565b809150509250929050565b600060208284031215612b14578081fd5b8151610e228161377e565b60008060408385031215612b31578182fd5b8251612b3c8161377e565b602084015190925067ffffffffffffffff811115612b58578182fd5b8301601f81018513612b68578182fd5b8051612b76612a938261366e565b818152866020838501011115612b8a578384fd5b612b9b826020830160208601613692565b8093505050509250929050565b60008060408385031215612bba578182fd5b823591506020830135612af881613769565b60008060408385031215612bde578182fd5b8235612be981613769565b946020939093013593505050565b600060808284031215612c08578081fd5b612c126080613647565b8235612c1d81613769565b81526020830135612c2d8161378c565b60208201526040830135612c408161378c565b60408201526060830135612c53816137a1565b60608201529392505050565b600060808284031215612c70578081fd5b612c7a6080613647565b8251612c8581613769565b81526020830151612c958161378c565b60208201526040830151612ca88161378c565b60408201526060830151612c53816137a1565b600080600080848603610160811215612cd2578283fd5b61012080821215612ce1578384fd5b8695508501359050612cf281613769565b925061014085013567ffffffffffffffff811115612d0e578283fd5b612d1a878288016128f1565b95989497509550505050565b60006101208284031215612d38578081fd5b610e228383612938565b6000806000806101608587031215612d58578182fd5b612d628686612938565b9350610120850135612cf281613769565b600060208284031215612d84578081fd5b81356001600160701b0381168114610e22578182fd5b600060208284031215612dab578081fd5b8135610e228161378c565b600060208284031215612dc7578081fd5b5035919050565b600060208284031215612ddf578081fd5b5051919050565b600060208284031215612df7578081fd5b8135610e22816137a1565b600060208284031215612e13578081fd5b8151610e22816137a1565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612e60816020860160208601613692565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b80516001600160a01b031682526020908101516001600160701b0316910152565b60008251612ee7818460208701613692565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039290921682526001600160701b0316602082015260400190565b901515815260200190565b60008315158252604060208301526127276040830184612e48565b90815260200190565b600060208252610e226020830184612e48565b600060408252612fd36040830185612e48565b905060018060a01b03831660208301529392505050565b600060608252612ffd6060830186612e48565b6001600160a01b039490941660208301525060400152919050565b60006040825261302b6040830185612e48565b828103602084015261303d8185612e48565b95945050505050565b6000604082526130596040830185612e48565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f6661696c656420747261646520616374696f6e20646964206e6f74207265667560408201526d6e6420696e7075742066756e647360901b606082015260800190565b60208082526025908201527f496e73756666696369656e742062616c616e636520746f206d616b65207472616040820152643739b332b960d91b606082015260800190565b6020808252601a908201527f5573656420746f6f206d616e7920696e70757420746f6b656e73000000000000604082015260600190565b6020808252600e908201526d04661696c656420746f20737761760941b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602b908201527f496e73756666696369656e74207370656e6420616c6c6f77616e6365206f6e2060408201526a34b7383aba103a37b5b2b760a91b606082015260800190565b60208082526029908201527f496e73756666696369656e7420696e70757420746f6b656e2062616c616e636560408201526820746f20747261646560b81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252601c908201527f496e73756666696369656e74207370656e6420616c6c6f77616e636500000000604082015260600190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b60208082526035908201527f547261646520616374696f6e20646964206e6f74207472616e73666572206f756040820152743a383aba103a37b5b2b739903a37903a3930b232b960591b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610e258284612e74565b82815260a0810161272a6020830184612e74565b600061016060018060a01b0380885116845280602089015116602085015260408801516040850152606088015160608501526080880151608085015260a08801516135bd60a0860182612eb4565b5060c08801516135d060e0860182612eb4565b50861661012084015261014083018190526127e78184018587612e1e565b6001600160701b0395909516855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561366657600080fd5b604052919050565b600067ffffffffffffffff821115613684578081fd5b50601f01601f191660200190565b60005b838110156136ad578181015183820152602001613695565b838111156125155750506000910152565b60e01c90565b600060443d10156136d457610a34565b600481823e6308c379a06136e882516136be565b146136f257610a34565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156137225750505050610a34565b8284019250825191508082111561373c5750505050610a34565b503d8301602082840101111561375457505050610a34565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114611ece57600080fd5b8015158114611ece57600080fd5b6001600160801b0381168114611ece57600080fd5b60ff81168114611ece57600080fdfe5472616e7366657272696e67207061727469616c20696e70757420746f6b656e20746f206465767465616d20666f72206661696c757265206761732066656573077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d75472616e7366657272696e6720666565732066726f6d20696e70757420746f6b656e20746f206465765465616d43616e6e6f74207265696d62757273652072656c61792073696e636520646f206e6f74206861766520656e6f7567682066756e647353656e64696e6720666565732066726f6d206f757470757420746f6b656e20746f207465616da49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177546656520746f6b656e206973206f75747075743b207468657265666f72652063616e6e6f74207265696d6275727365207465616d20666f72206661696c757265206761732066656573a2646970667358221220d206bf8973ca4a33cee8bb06aba3e523bf8a84e2877de9c232eaa91d673cd61d64736f6c63430007000033",
  "libraries": {
    "FeeCalculator": "0xA570d528f6e9Bd651fAbc0E57DD2936e2fbA088C",
    "LibAccess": "0x935f0Ad9Adb6C3B250F5947d70f5408A71803118",
    "LibConfig": "0x7a1A90C54be1eE9DFBf21882D94243DFae82915E",
    "ProxyAdmin": "0x8101fc8cc739300f8a404aedac6958839a53c62b",
    "Settlement": "0xD9FE7a6d6ce85C2381B9efaE70dB7446Fc960BB6",
    "TransparentUpgradeableProxy": "0xC1a431B84748a1aE2496d73C1dada32647f3B844",
    "ZrxRouter": "0x4D82AD07f4f56938d701072cF5D0EF8e85dCBb74"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositWNative(address,uint256)": {
        "notice": "Team's ability to deposit native token into this contract using wrapped  native asset allowance"
      },
      "fill((address,address,uint256,uint256,uint256,(address,uint112),(address,uint112)),address,bytes)": {
        "notice": "Fill an order using the given router and forwarded call data."
      },
      "getConfig()": {
        "notice": "Get the current configuration struct"
      },
      "getDevTeam()": {
        "notice": "Get the dev team wallet/multi-sig address"
      },
      "getLockoutBlocks()": {
        "notice": "Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw."
      },
      "getMinFee()": {
        "notice": "Get the minimum fee required for all orders"
      },
      "getPenaltyFee()": {
        "notice": "Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain."
      },
      "setConfig((address,uint128,uint128,uint8))": {
        "notice": "Set the current configuration as a bulk setting"
      },
      "setDevTeam(address)": {
        "notice": "Set the dev team wallet/multi-sig address"
      },
      "setLockoutBlocks(uint8)": {
        "notice": "Set the number of blocks to wait before thawed withdraws are allowed"
      },
      "setMinFee(uint128)": {
        "notice": "Set the minimum fee for an order execution"
      },
      "setPenaltyFee(uint128)": {
        "notice": "Set the penalty assessed when a user removes tokens or gas tank funds"
      },
      "withdraw(uint256)": {
        "notice": "Team's ability to withdraw ETH balance from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}